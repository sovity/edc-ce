/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogFilterExpressionLiteralType } from './CatalogFilterExpressionLiteralType';
import {
    CatalogFilterExpressionLiteralTypeFromJSON,
    CatalogFilterExpressionLiteralTypeFromJSONTyped,
    CatalogFilterExpressionLiteralTypeToJSON,
    CatalogFilterExpressionLiteralTypeToJSONTyped,
} from './CatalogFilterExpressionLiteralType';

/**
 * FilterExpression Criterion Literal
 * @export
 * @interface CatalogFilterExpressionLiteral
 */
export interface CatalogFilterExpressionLiteral {
    /**
     * 
     * @type {CatalogFilterExpressionLiteralType}
     * @memberof CatalogFilterExpressionLiteral
     */
    type?: CatalogFilterExpressionLiteralType;
    /**
     * Only for type VALUE. The single value representation.
     * @type {string}
     * @memberof CatalogFilterExpressionLiteral
     */
    value?: string;
    /**
     * Only for type VALUE_LIST. List of values, e.g. for the IN-Operator.
     * @type {Array<string>}
     * @memberof CatalogFilterExpressionLiteral
     */
    valueList?: Array<string>;
}



/**
 * Check if a given object implements the CatalogFilterExpressionLiteral interface.
 */
export function instanceOfCatalogFilterExpressionLiteral(value: any): value is CatalogFilterExpressionLiteral {
    return true;
}

export function CatalogFilterExpressionLiteralFromJSON(json: any): CatalogFilterExpressionLiteral {
    return CatalogFilterExpressionLiteralFromJSONTyped(json, false);
}

export function CatalogFilterExpressionLiteralFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogFilterExpressionLiteral {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : CatalogFilterExpressionLiteralTypeFromJSON(json['type']),
        'value': json['value'] == null ? undefined : json['value'],
        'valueList': json['valueList'] == null ? undefined : json['valueList'],
    };
}

export function CatalogFilterExpressionLiteralToJSON(json: any): CatalogFilterExpressionLiteral {
    return CatalogFilterExpressionLiteralToJSONTyped(json, false);
}

export function CatalogFilterExpressionLiteralToJSONTyped(value?: CatalogFilterExpressionLiteral | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': CatalogFilterExpressionLiteralTypeToJSON(value['type']),
        'value': value['value'],
        'valueList': value['valueList'],
    };
}

