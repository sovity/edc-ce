/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Types of OAuth2 flows supported
 * @export
 */
export const UiHttpOauth2AuthType = {
    SharedSecret: 'SHARED_SECRET',
    PrivateKey: 'PRIVATE_KEY'
} as const;
export type UiHttpOauth2AuthType = typeof UiHttpOauth2AuthType[keyof typeof UiHttpOauth2AuthType];


export function instanceOfUiHttpOauth2AuthType(value: any): boolean {
    for (const key in UiHttpOauth2AuthType) {
        if (Object.prototype.hasOwnProperty.call(UiHttpOauth2AuthType, key)) {
            if (UiHttpOauth2AuthType[key as keyof typeof UiHttpOauth2AuthType] === value) {
                return true;
            }
        }
    }
    return false;
}

export function UiHttpOauth2AuthTypeFromJSON(json: any): UiHttpOauth2AuthType {
    return UiHttpOauth2AuthTypeFromJSONTyped(json, false);
}

export function UiHttpOauth2AuthTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiHttpOauth2AuthType {
    return json as UiHttpOauth2AuthType;
}

export function UiHttpOauth2AuthTypeToJSON(value?: UiHttpOauth2AuthType | null): any {
    return value as any;
}

export function UiHttpOauth2AuthTypeToJSONTyped(value: any, ignoreDiscriminator: boolean): UiHttpOauth2AuthType {
    return value as UiHttpOauth2AuthType;
}

