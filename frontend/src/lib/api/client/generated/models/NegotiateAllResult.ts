/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UiPolicy } from './UiPolicy';
import {
    UiPolicyFromJSON,
    UiPolicyFromJSONTyped,
    UiPolicyToJSON,
    UiPolicyToJSONTyped,
} from './UiPolicy';
import type { UiAsset } from './UiAsset';
import {
    UiAssetFromJSON,
    UiAssetFromJSONTyped,
    UiAssetToJSON,
    UiAssetToJSONTyped,
} from './UiAsset';
import type { ContractNegotiationState } from './ContractNegotiationState';
import {
    ContractNegotiationStateFromJSON,
    ContractNegotiationStateFromJSONTyped,
    ContractNegotiationStateToJSON,
    ContractNegotiationStateToJSONTyped,
} from './ContractNegotiationState';

/**
 * Negotiations that either already exist or were started
 * @export
 * @interface NegotiateAllResult
 */
export interface NegotiateAllResult {
    /**
     * Negotiation ID (either existing or new if no active contract was found)
     * @type {string}
     * @memberof NegotiateAllResult
     */
    contractNegotiationId: string;
    /**
     * Contract Agreement ID (will only be ever present if an active old negotiation was found)
     * @type {string}
     * @memberof NegotiateAllResult
     */
    contractAgreementId?: string;
    /**
     * Contract Negotiation State
     * @type {ContractNegotiationState}
     * @memberof NegotiateAllResult
     */
    state: ContractNegotiationState;
    /**
     * Contract Negotiation State Last Change
     * @type {Date}
     * @memberof NegotiateAllResult
     */
    stateChangedAt: Date;
    /**
     * Asset that was negotiated. Will not contain asset metadata for already negotiated offers
     * @type {UiAsset}
     * @memberof NegotiateAllResult
     */
    asset: UiAsset;
    /**
     * Contract Offer that was negotiated. Will not contain asset metadata for already negotiated offers
     * @type {UiPolicy}
     * @memberof NegotiateAllResult
     */
    policy: UiPolicy;
}

/**
 * Check if a given object implements the NegotiateAllResult interface.
 */
export function instanceOfNegotiateAllResult(value: any): value is NegotiateAllResult {
    if (!('contractNegotiationId' in value) || value['contractNegotiationId'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('stateChangedAt' in value) || value['stateChangedAt'] === undefined) return false;
    if (!('asset' in value) || value['asset'] === undefined) return false;
    if (!('policy' in value) || value['policy'] === undefined) return false;
    return true;
}

export function NegotiateAllResultFromJSON(json: any): NegotiateAllResult {
    return NegotiateAllResultFromJSONTyped(json, false);
}

export function NegotiateAllResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): NegotiateAllResult {
    if (json == null) {
        return json;
    }
    return {
        
        'contractNegotiationId': json['contractNegotiationId'],
        'contractAgreementId': json['contractAgreementId'] == null ? undefined : json['contractAgreementId'],
        'state': ContractNegotiationStateFromJSON(json['state']),
        'stateChangedAt': (new Date(json['stateChangedAt'])),
        'asset': UiAssetFromJSON(json['asset']),
        'policy': UiPolicyFromJSON(json['policy']),
    };
}

export function NegotiateAllResultToJSON(json: any): NegotiateAllResult {
    return NegotiateAllResultToJSONTyped(json, false);
}

export function NegotiateAllResultToJSONTyped(value?: NegotiateAllResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contractNegotiationId': value['contractNegotiationId'],
        'contractAgreementId': value['contractAgreementId'],
        'state': ContractNegotiationStateToJSON(value['state']),
        'stateChangedAt': ((value['stateChangedAt']).toISOString()),
        'asset': UiAssetToJSON(value['asset']),
        'policy': UiPolicyToJSON(value['policy']),
    };
}

