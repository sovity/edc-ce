/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Type-Safe ODRL Policy Operator as supported by the sovity product landscape
 * @export
 */
export const OperatorDto = {
    Eq: 'EQ',
    Neq: 'NEQ',
    Gt: 'GT',
    Geq: 'GEQ',
    Lt: 'LT',
    Leq: 'LEQ',
    In: 'IN',
    HasPart: 'HAS_PART',
    IsA: 'IS_A',
    IsAllOf: 'IS_ALL_OF',
    IsAnyOf: 'IS_ANY_OF',
    IsNoneOf: 'IS_NONE_OF'
} as const;
export type OperatorDto = typeof OperatorDto[keyof typeof OperatorDto];


export function instanceOfOperatorDto(value: any): boolean {
    for (const key in OperatorDto) {
        if (Object.prototype.hasOwnProperty.call(OperatorDto, key)) {
            if (OperatorDto[key as keyof typeof OperatorDto] === value) {
                return true;
            }
        }
    }
    return false;
}

export function OperatorDtoFromJSON(json: any): OperatorDto {
    return OperatorDtoFromJSONTyped(json, false);
}

export function OperatorDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): OperatorDto {
    return json as OperatorDto;
}

export function OperatorDtoToJSON(value?: OperatorDto | null): any {
    return value as any;
}

export function OperatorDtoToJSONTyped(value: any, ignoreDiscriminator: boolean): OperatorDto {
    return value as OperatorDto;
}

