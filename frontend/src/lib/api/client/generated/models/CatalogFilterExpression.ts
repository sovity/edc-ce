/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogFilterExpressionLiteral } from './CatalogFilterExpressionLiteral';
import {
    CatalogFilterExpressionLiteralFromJSON,
    CatalogFilterExpressionLiteralFromJSONTyped,
    CatalogFilterExpressionLiteralToJSON,
    CatalogFilterExpressionLiteralToJSONTyped,
} from './CatalogFilterExpressionLiteral';
import type { CatalogFilterExpressionOperator } from './CatalogFilterExpressionOperator';
import {
    CatalogFilterExpressionOperatorFromJSON,
    CatalogFilterExpressionOperatorFromJSONTyped,
    CatalogFilterExpressionOperatorToJSON,
    CatalogFilterExpressionOperatorToJSONTyped,
} from './CatalogFilterExpressionOperator';

/**
 * Generic expression for filtering the data offers in the catalog
 * @export
 * @interface CatalogFilterExpression
 */
export interface CatalogFilterExpression {
    /**
     * Asset property name
     * @type {string}
     * @memberof CatalogFilterExpression
     */
    operandLeft: string;
    /**
     * Operator
     * @type {CatalogFilterExpressionOperator}
     * @memberof CatalogFilterExpression
     */
    operator: CatalogFilterExpressionOperator;
    /**
     * Right Operand
     * @type {CatalogFilterExpressionLiteral}
     * @memberof CatalogFilterExpression
     */
    operandRight: CatalogFilterExpressionLiteral;
}



/**
 * Check if a given object implements the CatalogFilterExpression interface.
 */
export function instanceOfCatalogFilterExpression(value: any): value is CatalogFilterExpression {
    if (!('operandLeft' in value) || value['operandLeft'] === undefined) return false;
    if (!('operator' in value) || value['operator'] === undefined) return false;
    if (!('operandRight' in value) || value['operandRight'] === undefined) return false;
    return true;
}

export function CatalogFilterExpressionFromJSON(json: any): CatalogFilterExpression {
    return CatalogFilterExpressionFromJSONTyped(json, false);
}

export function CatalogFilterExpressionFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogFilterExpression {
    if (json == null) {
        return json;
    }
    return {
        
        'operandLeft': json['operandLeft'],
        'operator': CatalogFilterExpressionOperatorFromJSON(json['operator']),
        'operandRight': CatalogFilterExpressionLiteralFromJSON(json['operandRight']),
    };
}

export function CatalogFilterExpressionToJSON(json: any): CatalogFilterExpression {
    return CatalogFilterExpressionToJSONTyped(json, false);
}

export function CatalogFilterExpressionToJSONTyped(value?: CatalogFilterExpression | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'operandLeft': value['operandLeft'],
        'operator': CatalogFilterExpressionOperatorToJSON(value['operator']),
        'operandRight': CatalogFilterExpressionLiteralToJSON(value['operandRight']),
    };
}

