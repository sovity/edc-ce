/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Ui Policy Expression types:
 * * `CONSTRAINT` - Expression 'a=b'
 * * `AND` - Conjunction of several expressions. Evaluates to true iff all child expressions are true.
 * * `OR` - Disjunction of several expressions. Evaluates to true iff at least one child expression is true.
 * * `XONE` - XONE operation. Evaluates to true iff exactly one child expression is true.
 * 
 * @export
 */
export const UiPolicyExpressionType = {
    Empty: 'EMPTY',
    Constraint: 'CONSTRAINT',
    And: 'AND',
    Or: 'OR',
    Xone: 'XONE'
} as const;
export type UiPolicyExpressionType = typeof UiPolicyExpressionType[keyof typeof UiPolicyExpressionType];


export function instanceOfUiPolicyExpressionType(value: any): boolean {
    for (const key in UiPolicyExpressionType) {
        if (Object.prototype.hasOwnProperty.call(UiPolicyExpressionType, key)) {
            if (UiPolicyExpressionType[key as keyof typeof UiPolicyExpressionType] === value) {
                return true;
            }
        }
    }
    return false;
}

export function UiPolicyExpressionTypeFromJSON(json: any): UiPolicyExpressionType {
    return UiPolicyExpressionTypeFromJSONTyped(json, false);
}

export function UiPolicyExpressionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiPolicyExpressionType {
    return json as UiPolicyExpressionType;
}

export function UiPolicyExpressionTypeToJSON(value?: UiPolicyExpressionType | null): any {
    return value as any;
}

export function UiPolicyExpressionTypeToJSONTyped(value: any, ignoreDiscriminator: boolean): UiPolicyExpressionType {
    return value as UiPolicyExpressionType;
}

