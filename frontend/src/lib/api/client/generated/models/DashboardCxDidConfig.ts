/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Managed Identity Wallet (MIW) Config
 * @export
 * @interface DashboardCxDidConfig
 */
export interface DashboardCxDidConfig {
    /**
     * My DID / edc.iam.issuer.id
     * @type {string}
     * @memberof DashboardCxDidConfig
     */
    myDid: string;
    /**
     * Wallet Token Url / edc.iam.sts.oauth.token.url
     * @type {string}
     * @memberof DashboardCxDidConfig
     */
    walletTokenUrl: string;
    /**
     * Trusted VC Issuer / edc.iam.trusted-issuer.cofinity.id
     * @type {string}
     * @memberof DashboardCxDidConfig
     */
    trustedVcIssuer: string;
    /**
     * BDRS Url / tx.iam.iatp.bdrs.server.url
     * @type {string}
     * @memberof DashboardCxDidConfig
     */
    bdrsUrl: string;
    /**
     * STS DIM Url / edc.iam.sts.dim.url
     * @type {string}
     * @memberof DashboardCxDidConfig
     */
    dimUrl: string;
}

/**
 * Check if a given object implements the DashboardCxDidConfig interface.
 */
export function instanceOfDashboardCxDidConfig(value: any): value is DashboardCxDidConfig {
    if (!('myDid' in value) || value['myDid'] === undefined) return false;
    if (!('walletTokenUrl' in value) || value['walletTokenUrl'] === undefined) return false;
    if (!('trustedVcIssuer' in value) || value['trustedVcIssuer'] === undefined) return false;
    if (!('bdrsUrl' in value) || value['bdrsUrl'] === undefined) return false;
    if (!('dimUrl' in value) || value['dimUrl'] === undefined) return false;
    return true;
}

export function DashboardCxDidConfigFromJSON(json: any): DashboardCxDidConfig {
    return DashboardCxDidConfigFromJSONTyped(json, false);
}

export function DashboardCxDidConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): DashboardCxDidConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'myDid': json['myDid'],
        'walletTokenUrl': json['walletTokenUrl'],
        'trustedVcIssuer': json['trustedVcIssuer'],
        'bdrsUrl': json['bdrsUrl'],
        'dimUrl': json['dimUrl'],
    };
}

export function DashboardCxDidConfigToJSON(json: any): DashboardCxDidConfig {
    return DashboardCxDidConfigToJSONTyped(json, false);
}

export function DashboardCxDidConfigToJSONTyped(value?: DashboardCxDidConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'myDid': value['myDid'],
        'walletTokenUrl': value['walletTokenUrl'],
        'trustedVcIssuer': value['trustedVcIssuer'],
        'bdrsUrl': value['bdrsUrl'],
        'dimUrl': value['dimUrl'],
    };
}

