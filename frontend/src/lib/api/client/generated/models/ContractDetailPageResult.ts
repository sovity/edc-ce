/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UiPolicy } from './UiPolicy';
import {
    UiPolicyFromJSON,
    UiPolicyFromJSONTyped,
    UiPolicyToJSON,
    UiPolicyToJSONTyped,
} from './UiPolicy';
import type { UiAsset } from './UiAsset';
import {
    UiAssetFromJSON,
    UiAssetFromJSONTyped,
    UiAssetToJSON,
    UiAssetToJSONTyped,
} from './UiAsset';
import type { ContractAgreementTerminationInfo } from './ContractAgreementTerminationInfo';
import {
    ContractAgreementTerminationInfoFromJSON,
    ContractAgreementTerminationInfoFromJSONTyped,
    ContractAgreementTerminationInfoToJSON,
    ContractAgreementTerminationInfoToJSONTyped,
} from './ContractAgreementTerminationInfo';
import type { ContractAgreementTransferProcess } from './ContractAgreementTransferProcess';
import {
    ContractAgreementTransferProcessFromJSON,
    ContractAgreementTransferProcessFromJSONTyped,
    ContractAgreementTransferProcessToJSON,
    ContractAgreementTransferProcessToJSONTyped,
} from './ContractAgreementTransferProcess';
import type { ContractAgreementDirection } from './ContractAgreementDirection';
import {
    ContractAgreementDirectionFromJSON,
    ContractAgreementDirectionFromJSONTyped,
    ContractAgreementDirectionToJSON,
    ContractAgreementDirectionToJSONTyped,
} from './ContractAgreementDirection';
import type { ContractTerminationStatus } from './ContractTerminationStatus';
import {
    ContractTerminationStatusFromJSON,
    ContractTerminationStatusFromJSONTyped,
    ContractTerminationStatusToJSON,
    ContractTerminationStatusToJSONTyped,
} from './ContractTerminationStatus';

/**
 * Contract Agreement Details Page
 * @export
 * @interface ContractDetailPageResult
 */
export interface ContractDetailPageResult {
    /**
     * Contract Agreement ID
     * @type {string}
     * @memberof ContractDetailPageResult
     */
    contractAgreementId: string;
    /**
     * Contract Negotiation ID
     * @type {string}
     * @memberof ContractDetailPageResult
     */
    contractNegotiationId: string;
    /**
     * Incoming vs Outgoing
     * @type {ContractAgreementDirection}
     * @memberof ContractDetailPageResult
     */
    direction: ContractAgreementDirection;
    /**
     * Other Connector's Endpoint
     * @type {string}
     * @memberof ContractDetailPageResult
     */
    counterPartyAddress: string;
    /**
     * Other Connector's ID
     * @type {string}
     * @memberof ContractDetailPageResult
     */
    counterPartyId: string;
    /**
     * Contract Agreements Signing Date
     * @type {Date}
     * @memberof ContractDetailPageResult
     */
    contractSigningDate: Date;
    /**
     * Asset details
     * @type {UiAsset}
     * @memberof ContractDetailPageResult
     */
    asset: UiAsset;
    /**
     * Contract Policy
     * @type {UiPolicy}
     * @memberof ContractDetailPageResult
     */
    contractPolicy: UiPolicy;
    /**
     * Contract Agreement's Transfer Processes
     * @type {Array<ContractAgreementTransferProcess>}
     * @memberof ContractDetailPageResult
     */
    transferProcesses: Array<ContractAgreementTransferProcess>;
    /**
     * Contract Agreement's Termination Status
     * @type {ContractTerminationStatus}
     * @memberof ContractDetailPageResult
     */
    terminationStatus: ContractTerminationStatus;
    /**
     * Contract Agreement's Metadata
     * @type {ContractAgreementTerminationInfo}
     * @memberof ContractDetailPageResult
     */
    terminationInformation?: ContractAgreementTerminationInfo;
}



/**
 * Check if a given object implements the ContractDetailPageResult interface.
 */
export function instanceOfContractDetailPageResult(value: any): value is ContractDetailPageResult {
    if (!('contractAgreementId' in value) || value['contractAgreementId'] === undefined) return false;
    if (!('contractNegotiationId' in value) || value['contractNegotiationId'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('counterPartyAddress' in value) || value['counterPartyAddress'] === undefined) return false;
    if (!('counterPartyId' in value) || value['counterPartyId'] === undefined) return false;
    if (!('contractSigningDate' in value) || value['contractSigningDate'] === undefined) return false;
    if (!('asset' in value) || value['asset'] === undefined) return false;
    if (!('contractPolicy' in value) || value['contractPolicy'] === undefined) return false;
    if (!('transferProcesses' in value) || value['transferProcesses'] === undefined) return false;
    if (!('terminationStatus' in value) || value['terminationStatus'] === undefined) return false;
    return true;
}

export function ContractDetailPageResultFromJSON(json: any): ContractDetailPageResult {
    return ContractDetailPageResultFromJSONTyped(json, false);
}

export function ContractDetailPageResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContractDetailPageResult {
    if (json == null) {
        return json;
    }
    return {
        
        'contractAgreementId': json['contractAgreementId'],
        'contractNegotiationId': json['contractNegotiationId'],
        'direction': ContractAgreementDirectionFromJSON(json['direction']),
        'counterPartyAddress': json['counterPartyAddress'],
        'counterPartyId': json['counterPartyId'],
        'contractSigningDate': (new Date(json['contractSigningDate'])),
        'asset': UiAssetFromJSON(json['asset']),
        'contractPolicy': UiPolicyFromJSON(json['contractPolicy']),
        'transferProcesses': ((json['transferProcesses'] as Array<any>).map(ContractAgreementTransferProcessFromJSON)),
        'terminationStatus': ContractTerminationStatusFromJSON(json['terminationStatus']),
        'terminationInformation': json['terminationInformation'] == null ? undefined : ContractAgreementTerminationInfoFromJSON(json['terminationInformation']),
    };
}

export function ContractDetailPageResultToJSON(json: any): ContractDetailPageResult {
    return ContractDetailPageResultToJSONTyped(json, false);
}

export function ContractDetailPageResultToJSONTyped(value?: ContractDetailPageResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contractAgreementId': value['contractAgreementId'],
        'contractNegotiationId': value['contractNegotiationId'],
        'direction': ContractAgreementDirectionToJSON(value['direction']),
        'counterPartyAddress': value['counterPartyAddress'],
        'counterPartyId': value['counterPartyId'],
        'contractSigningDate': ((value['contractSigningDate']).toISOString()),
        'asset': UiAssetToJSON(value['asset']),
        'contractPolicy': UiPolicyToJSON(value['contractPolicy']),
        'transferProcesses': ((value['transferProcesses'] as Array<any>).map(ContractAgreementTransferProcessToJSON)),
        'terminationStatus': ContractTerminationStatusToJSON(value['terminationStatus']),
        'terminationInformation': ContractAgreementTerminationInfoToJSON(value['terminationInformation']),
    };
}

