/*
 * Copyright sovity GmbH and/or licensed to sovity GmbH under one or
 * more contributor license agreements. You may not use this file except
 * in compliance with the "Elastic License 2.0".
 *
 * SPDX-License-Identifier: Elastic-2.0
 */
import com.squareup.javapoet.AnnotationSpec
import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.TypeName
import com.squareup.javapoet.TypeSpec
import javax.annotation.processing.Generated
import javax.lang.model.element.Modifier.FINAL
import javax.lang.model.element.Modifier.PUBLIC
import javax.lang.model.element.Modifier.STATIC
import java.lang.String as JavaString


plugins {
    `java-library`
}

buildscript {
    dependencies {
        classpath(libs.squareup.javapoet)
        classpath(libs.lombok)
    }
}

val generateVersionFiles by tasks.creating {
    val targetFolder = "generated/sources/gradle/main/java"

    group = "sovity"
    description = "Generates the versions from libs.versions.toml into GradleVersionsCe"

    outputs.cacheIf { true }
    inputs.file(project.rootDir.resolve("gradle/libs.versions.toml"))
    outputs.dir(project.layout.buildDirectory.file(targetFolder))

    doLast {
        generateJvmVersions(project.layout.buildDirectory.file(targetFolder))
    }
    sourceSets["main"].java.srcDir(project.layout.buildDirectory.file(targetFolder))
}

tasks.getByName("compileJava") {
    dependsOn(generateVersionFiles)
}

tasks.getByName("compileKotlin") {
    dependsOn(generateVersionFiles)
}

fun generateJvmVersions(target: Provider<RegularFile>) {
    val versionsClass = TypeSpec.classBuilder("GradleVersionsCe")
        .addAnnotation(
            AnnotationSpec.builder(Generated::class.java)
                .addMember("value", "\$S", "Generated by the gradle ${project.path}:${generateVersionFiles} task")
                .build()
        )
        .addModifiers(PUBLIC, FINAL)
        .addField(
            FieldSpec.builder(TypeName.get(JavaString::class.java), "POSTGRES_IMAGE_TAG")
                .initializer("\$S", libs.versions.postgresDbImage.get())
                .addModifiers(PUBLIC, STATIC, FINAL)
                .build()
        )
        .build()
    val packageName = "de.sovity.edc.ce.versions"
    val javaFile = JavaFile.builder(packageName, versionsClass).build()

    javaFile.writeTo(file(target))
}
