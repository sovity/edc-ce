/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContractAgreementDirection } from './ContractAgreementDirection';
import {
    ContractAgreementDirectionFromJSON,
    ContractAgreementDirectionFromJSONTyped,
    ContractAgreementDirectionToJSON,
    ContractAgreementDirectionToJSONTyped,
} from './ContractAgreementDirection';
import type { ContractTerminationStatus } from './ContractTerminationStatus';
import {
    ContractTerminationStatusFromJSON,
    ContractTerminationStatusFromJSONTyped,
    ContractTerminationStatusToJSON,
    ContractTerminationStatusToJSONTyped,
} from './ContractTerminationStatus';

/**
 * Contracts Page Entry
 * @export
 * @interface ContractsPageEntry
 */
export interface ContractsPageEntry {
    /**
     * Contract Agreement ID
     * @type {string}
     * @memberof ContractsPageEntry
     */
    contractAgreementId: string;
    /**
     * Incoming vs Outgoing
     * @type {ContractAgreementDirection}
     * @memberof ContractsPageEntry
     */
    direction: ContractAgreementDirection;
    /**
     * Other Connector's ID
     * @type {string}
     * @memberof ContractsPageEntry
     */
    counterPartyId: string;
    /**
     * Contract Agreements Signing Date
     * @type {Date}
     * @memberof ContractsPageEntry
     */
    contractSigningDate: Date;
    /**
     * Asset ID
     * @type {string}
     * @memberof ContractsPageEntry
     */
    assetId: string;
    /**
     * Asset title
     * @type {string}
     * @memberof ContractsPageEntry
     */
    assetTitle: string;
    /**
     * Number of transfer processes
     * @type {number}
     * @memberof ContractsPageEntry
     */
    transferProcessesCount: number;
    /**
     * Contract Agreement's Termination Status
     * @type {ContractTerminationStatus}
     * @memberof ContractsPageEntry
     */
    terminationStatus: ContractTerminationStatus;
    /**
     * Contract Terminated At
     * @type {Date}
     * @memberof ContractsPageEntry
     */
    terminatedAt?: Date;
}



/**
 * Check if a given object implements the ContractsPageEntry interface.
 */
export function instanceOfContractsPageEntry(value: any): value is ContractsPageEntry {
    if (!('contractAgreementId' in value) || value['contractAgreementId'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('counterPartyId' in value) || value['counterPartyId'] === undefined) return false;
    if (!('contractSigningDate' in value) || value['contractSigningDate'] === undefined) return false;
    if (!('assetId' in value) || value['assetId'] === undefined) return false;
    if (!('assetTitle' in value) || value['assetTitle'] === undefined) return false;
    if (!('transferProcessesCount' in value) || value['transferProcessesCount'] === undefined) return false;
    if (!('terminationStatus' in value) || value['terminationStatus'] === undefined) return false;
    return true;
}

export function ContractsPageEntryFromJSON(json: any): ContractsPageEntry {
    return ContractsPageEntryFromJSONTyped(json, false);
}

export function ContractsPageEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContractsPageEntry {
    if (json == null) {
        return json;
    }
    return {
        
        'contractAgreementId': json['contractAgreementId'],
        'direction': ContractAgreementDirectionFromJSON(json['direction']),
        'counterPartyId': json['counterPartyId'],
        'contractSigningDate': (new Date(json['contractSigningDate'])),
        'assetId': json['assetId'],
        'assetTitle': json['assetTitle'],
        'transferProcessesCount': json['transferProcessesCount'],
        'terminationStatus': ContractTerminationStatusFromJSON(json['terminationStatus']),
        'terminatedAt': json['terminatedAt'] == null ? undefined : (new Date(json['terminatedAt'])),
    };
}

export function ContractsPageEntryToJSON(json: any): ContractsPageEntry {
    return ContractsPageEntryToJSONTyped(json, false);
}

export function ContractsPageEntryToJSONTyped(value?: ContractsPageEntry | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contractAgreementId': value['contractAgreementId'],
        'direction': ContractAgreementDirectionToJSON(value['direction']),
        'counterPartyId': value['counterPartyId'],
        'contractSigningDate': ((value['contractSigningDate']).toISOString()),
        'assetId': value['assetId'],
        'assetTitle': value['assetTitle'],
        'transferProcessesCount': value['transferProcessesCount'],
        'terminationStatus': ContractTerminationStatusToJSON(value['terminationStatus']),
        'terminatedAt': value['terminatedAt'] == null ? undefined : ((value['terminatedAt']).toISOString()),
    };
}

