version: "3.8"
services:
  edc-ui:
    image: ${EDC_UI_IMAGE}
    ports:
      - '11000:8080'
      - '11015:5005'
    environment:
      EDC_UI_ACTIVE_PROFILE: ${EDC_UI_ACTIVE_PROFILE}
      EDC_UI_CONFIG_URL: edc-ui-config
      EDC_UI_CATALOG_URLS: http://edc2:11003/api/dsp
      EDC_UI_MANAGEMENT_API_URL: http://localhost:11002/api/management
      EDC_UI_MANAGEMENT_API_KEY: ApiKeyDefaultValue
      EDC_UI_MANAGEMENT_API_URL_SHOWN_IN_DASHBOARD: http://localhost:11002/control/api/management
      NGINX_ACCESS_LOG: off

  edc:
    image: ${EDC_IMAGE}
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      MY_EDC_PARTICIPANT_ID: sovity-demo-a
      EDC_OAUTH_TOKEN_URL: https://keycloak.stage-sovity.azure.sovity.io/realms/DAPS/protocol/openid-connect/token
      EDC_OAUTH_PROVIDER_JWKS_URL: https://keycloak.stage-sovity.azure.sovity.io/realms/DAPS/protocol/openid-connect/certs
      EDC_OAUTH_CLIENT_ID: 74:BE:81:48:61:F9:0E:06:2D:E4:CB:96:2E:36:30:11:83:4C:32:29:keyid:EB:8E:86:7F:A2:B6:19:8A:10:58:46:CF:88:38:D6:F1:E1:E2:FC:69
      EDC_KEYSTORE: "/keystore.jks"
      EDC_KEYSTORE_PASSWORD: 'changeit'
      EDC_OAUTH_CERTIFICATE_ALIAS: 1
      EDC_OAUTH_PRIVATE_KEY_ALIAS: 1
      MY_EDC_TITLE: "EDC Connector"
      MY_EDC_DESCRIPTION: "sovity Community Edition EDC Connector"
      MY_EDC_CURATOR_URL: "https://example.com"
      MY_EDC_CURATOR_NAME: "Example GmbH"
      MY_EDC_MAINTAINER_URL: "https://sovity.de"
      MY_EDC_MAINTAINER_NAME: "sovity GmbH"

      MY_EDC_FQDN: "edc"
      EDC_API_AUTH_KEY: ApiKeyDefaultValue

      MY_EDC_JDBC_URL: jdbc:postgresql://postgresql:5432/edc
      MY_EDC_JDBC_USER: edc
      MY_EDC_JDBC_PASSWORD: edc

      # docker compose local dev environment overrides (don't use with non-dev images)
      MY_EDC_PROTOCOL: "http://"
      EDC_DSP_CALLBACK_ADDRESS: http://edc:11003/api/dsp
      EDC_WEB_REST_CORS_ENABLED: 'true'
      EDC_WEB_REST_CORS_HEADERS: 'origin,content-type,accept,authorization,X-Api-Key'
      EDC_WEB_REST_CORS_ORIGINS: '*'
#      EDC_AGENT_IDENTITY_KEY: 'client_id' # required for Mock IAM to work

      # LH-Extension
      EDC_LOGGINGHOUSE_EXTENSION_ENABLED: 'true' #Deaktivierte LH-Extension
      EDC_LOGGINGHOUSE_EXTENSION_URL: https://webhook.site/5de03553-60fb-4654-a39f-86ab7bf98950
      EDC_DATASOURCE_LOGGINGHOUSE_URL: jdbc:postgresql://postgresql:5432/edc
      EDC_DATASOURCE_LOGGINGHOUSE_USER: edc
      EDC_DATASOURCE_LOGGINGHOUSE_PASSWORD: edc

    ports:
      - '11001:11001'
      - '11002:11002'
      - '11003:11003'
      - '11004:11004'
      - '11005:5005'

    volumes:
      - /home/uuh/dev/.more/daps/server.keystore:/keystore.jks

  edc-ui2:
    image: ${EDC_UI_IMAGE}
    ports:
      - '22000:8080'
    environment:
      EDC_UI_ACTIVE_PROFILE: ${EDC_UI_ACTIVE_PROFILE}
      EDC_UI_CONFIG_URL: edc-ui-config
      EDC_UI_MANAGEMENT_API_URL: http://localhost:22002/api/management
      EDC_UI_MANAGEMENT_API_KEY: ApiKeyDefaultValue
      EDC_UI_CATALOG_URLS: http://edc:11003/api/dsp
      NGINX_ACCESS_LOG: off

  edc2:
    image: ${EDC_IMAGE}
    depends_on:
      postgresql2:
        condition: service_healthy
    environment:
      MY_EDC_PARTICIPANT_ID: "my-edc2"
      MY_EDC_TITLE: "EDC Connector 2"
      MY_EDC_DESCRIPTION: "sovity Community Edition EDC Connector"
      MY_EDC_CURATOR_URL: "https://example.com"
      MY_EDC_CURATOR_NAME: "Example GmbH"
      MY_EDC_MAINTAINER_URL: "https://sovity.de"
      MY_EDC_MAINTAINER_NAME: "sovity GmbH"

      MY_EDC_FQDN: "edc2"
      EDC_API_AUTH_KEY: ApiKeyDefaultValue

      MY_EDC_JDBC_URL: jdbc:postgresql://postgresql2:5432/edc
      MY_EDC_JDBC_USER: edc
      MY_EDC_JDBC_PASSWORD: edc

      # docker compose local dev environment overrides (don't use with non-dev images)
      MY_EDC_PROTOCOL: "http://"
      EDC_DSP_CALLBACK_ADDRESS: http://edc2:11003/api/dsp
      EDC_WEB_REST_CORS_ENABLED: 'true'
      EDC_WEB_REST_CORS_HEADERS: 'origin,content-type,accept,authorization,X-Api-Key'
      EDC_WEB_REST_CORS_ORIGINS: '*'
      EDC_AGENT_IDENTITY_KEY: 'client_id' # required for Mock IAM to work

    ports:
      - '22001:11001'
      - '22002:11002'
      - '22003:11003'
      - '22004:11004'
      - '22005:5005'

  test-backend:
    image: ${TEST_BACKEND_IMAGE}
    ports:
      - '33001:11001'

  postgresql:
    image: docker.io/bitnami/postgresql:15
    restart: always
    environment:
      POSTGRESQL_USERNAME: edc
      POSTGRESQL_PASSWORD: edc
      POSTGRESQL_DATABASE: edc
    ports:
      - '54321:5432'
    volumes:
      - 'postgresql:/bitnami/postgresql'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U edc" ]
      interval: 1s
      timeout: 5s
      retries: 10

  postgresql2:
    image: docker.io/bitnami/postgresql:15
    restart: always
    environment:
      POSTGRESQL_USERNAME: edc
      POSTGRESQL_PASSWORD: edc
      POSTGRESQL_DATABASE: edc
    ports:
      - '54322:5432'
    volumes:
      - 'postgresql2:/bitnami/postgresql'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U edc" ]
      interval: 1s
      timeout: 5s
      retries: 10

volumes:
  postgresql:
    driver: local
  postgresql2:
    driver: local

