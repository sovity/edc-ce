/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssetPage,
  BuildInfo,
  BusinessPartnerGroupCreateSubmit,
  BusinessPartnerGroupEditPage,
  BusinessPartnerGroupEditSubmit,
  BusinessPartnerGroupListPageEntry,
  BusinessPartnerGroupQuery,
  ContractAgreementCard,
  ContractAgreementPage,
  ContractAgreementPageQuery,
  ContractDefinitionPage,
  ContractDefinitionRequest,
  ContractNegotiationRequest,
  ContractTerminationRequest,
  DashboardPage,
  DataOfferCreateRequest,
  IdAvailabilityResponse,
  IdResponseDto,
  InitiateCustomTransferRequest,
  InitiateTransferRequest,
  PolicyDefinitionCreateDto,
  PolicyDefinitionCreateRequest,
  PolicyDefinitionPage,
  TransferHistoryPage,
  UiAsset,
  UiAssetCreateRequest,
  UiAssetEditRequest,
  UiConfig,
  UiContractNegotiation,
  UiDataOffer,
  UiInitiateTransferRequest,
  VaultSecretCreateSubmit,
  VaultSecretEditPage,
  VaultSecretEditSubmit,
  VaultSecretListPageEntry,
  VaultSecretQuery,
} from '../models/index';
import {
    AssetPageFromJSON,
    AssetPageToJSON,
    BuildInfoFromJSON,
    BuildInfoToJSON,
    BusinessPartnerGroupCreateSubmitFromJSON,
    BusinessPartnerGroupCreateSubmitToJSON,
    BusinessPartnerGroupEditPageFromJSON,
    BusinessPartnerGroupEditPageToJSON,
    BusinessPartnerGroupEditSubmitFromJSON,
    BusinessPartnerGroupEditSubmitToJSON,
    BusinessPartnerGroupListPageEntryFromJSON,
    BusinessPartnerGroupListPageEntryToJSON,
    BusinessPartnerGroupQueryFromJSON,
    BusinessPartnerGroupQueryToJSON,
    ContractAgreementCardFromJSON,
    ContractAgreementCardToJSON,
    ContractAgreementPageFromJSON,
    ContractAgreementPageToJSON,
    ContractAgreementPageQueryFromJSON,
    ContractAgreementPageQueryToJSON,
    ContractDefinitionPageFromJSON,
    ContractDefinitionPageToJSON,
    ContractDefinitionRequestFromJSON,
    ContractDefinitionRequestToJSON,
    ContractNegotiationRequestFromJSON,
    ContractNegotiationRequestToJSON,
    ContractTerminationRequestFromJSON,
    ContractTerminationRequestToJSON,
    DashboardPageFromJSON,
    DashboardPageToJSON,
    DataOfferCreateRequestFromJSON,
    DataOfferCreateRequestToJSON,
    IdAvailabilityResponseFromJSON,
    IdAvailabilityResponseToJSON,
    IdResponseDtoFromJSON,
    IdResponseDtoToJSON,
    InitiateCustomTransferRequestFromJSON,
    InitiateCustomTransferRequestToJSON,
    InitiateTransferRequestFromJSON,
    InitiateTransferRequestToJSON,
    PolicyDefinitionCreateDtoFromJSON,
    PolicyDefinitionCreateDtoToJSON,
    PolicyDefinitionCreateRequestFromJSON,
    PolicyDefinitionCreateRequestToJSON,
    PolicyDefinitionPageFromJSON,
    PolicyDefinitionPageToJSON,
    TransferHistoryPageFromJSON,
    TransferHistoryPageToJSON,
    UiAssetFromJSON,
    UiAssetToJSON,
    UiAssetCreateRequestFromJSON,
    UiAssetCreateRequestToJSON,
    UiAssetEditRequestFromJSON,
    UiAssetEditRequestToJSON,
    UiConfigFromJSON,
    UiConfigToJSON,
    UiContractNegotiationFromJSON,
    UiContractNegotiationToJSON,
    UiDataOfferFromJSON,
    UiDataOfferToJSON,
    UiInitiateTransferRequestFromJSON,
    UiInitiateTransferRequestToJSON,
    VaultSecretCreateSubmitFromJSON,
    VaultSecretCreateSubmitToJSON,
    VaultSecretEditPageFromJSON,
    VaultSecretEditPageToJSON,
    VaultSecretEditSubmitFromJSON,
    VaultSecretEditSubmitToJSON,
    VaultSecretListPageEntryFromJSON,
    VaultSecretListPageEntryToJSON,
    VaultSecretQueryFromJSON,
    VaultSecretQueryToJSON,
} from '../models/index';

export interface BusinessPartnerGroupCreateSubmitRequest {
    businessPartnerGroupCreateSubmit?: BusinessPartnerGroupCreateSubmit;
}

export interface BusinessPartnerGroupEditPageRequest {
    id: string;
}

export interface BusinessPartnerGroupEditSubmitRequest {
    id: string;
    businessPartnerGroupEditSubmit?: BusinessPartnerGroupEditSubmit;
}

export interface BusinessPartnerGroupListPageRequest {
    businessPartnerGroupQuery?: BusinessPartnerGroupQuery;
}

export interface CreateAssetRequest {
    uiAssetCreateRequest?: UiAssetCreateRequest;
}

export interface CreateContractDefinitionRequest {
    contractDefinitionRequest?: ContractDefinitionRequest;
}

export interface CreateDataOfferRequest {
    dataOfferCreateRequest?: DataOfferCreateRequest;
}

export interface CreatePolicyDefinitionRequest {
    policyDefinitionCreateRequest?: PolicyDefinitionCreateRequest;
}

export interface CreatePolicyDefinitionV2Request {
    policyDefinitionCreateDto?: PolicyDefinitionCreateDto;
}

export interface CreateVaultSecretRequest {
    vaultSecretCreateSubmit?: VaultSecretCreateSubmit;
}

export interface DeleteAssetRequest {
    assetId: string;
}

export interface DeleteBusinessPartnerGroupRequest {
    id: string;
}

export interface DeleteContractDefinitionRequest {
    contractDefinitionId: string;
}

export interface DeletePolicyDefinitionRequest {
    policyId: string;
}

export interface DeleteVaultSecretRequest {
    key: string;
}

export interface EditAssetRequest {
    assetId: string;
    uiAssetEditRequest?: UiAssetEditRequest;
}

export interface EditVaultSecretRequest {
    key: string;
    vaultSecretEditSubmit?: VaultSecretEditSubmit;
}

export interface EditVaultSecretPageRequest {
    key: string;
}

export interface GetCatalogPageDataOfferRequest {
    participantId: string;
    connectorEndpoint: string;
    dataOfferId: string;
}

export interface GetCatalogPageDataOffersRequest {
    participantId?: string;
    connectorEndpoint?: string;
}

export interface GetContractAgreementCardRequest {
    contractAgreementId: string;
}

export interface GetContractAgreementPageRequest {
    contractAgreementPageQuery?: ContractAgreementPageQuery;
}

export interface GetContractNegotiationRequest {
    contractNegotiationId: string;
}

export interface GetTransferProcessAssetRequest {
    transferProcessId: string;
}

export interface InitiateContractNegotiationRequest {
    contractNegotiationRequest?: ContractNegotiationRequest;
}

export interface InitiateCustomTransferOperationRequest {
    initiateCustomTransferRequest?: InitiateCustomTransferRequest;
}

export interface InitiateTransferOperationRequest {
    initiateTransferRequest?: InitiateTransferRequest;
}

export interface InitiateTransferV2Request {
    uiInitiateTransferRequest?: UiInitiateTransferRequest;
}

export interface IsAssetIdAvailableRequest {
    assetId: string;
}

export interface IsContractDefinitionIdAvailableRequest {
    contractDefinitionId: string;
}

export interface IsPolicyIdAvailableRequest {
    policyId: string;
}

export interface ListVaultSecretsPageRequest {
    vaultSecretQuery?: VaultSecretQuery;
}

export interface TerminateContractAgreementRequest {
    contractAgreementId: string;
    contractTerminationRequest?: ContractTerminationRequest;
}

/**
 * 
 */
export class UIApi extends runtime.BaseAPI {

    /**
     * Get the build version info
     */
    async buildInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/build-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildInfoFromJSON(jsonValue));
    }

    /**
     * Get the build version info
     */
    async buildInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildInfo> {
        const response = await this.buildInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new Business Partner Group
     */
    async businessPartnerGroupCreateSubmitRaw(requestParameters: BusinessPartnerGroupCreateSubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/business-partner-groups/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BusinessPartnerGroupCreateSubmitToJSON(requestParameters['businessPartnerGroupCreateSubmit']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new Business Partner Group
     */
    async businessPartnerGroupCreateSubmit(requestParameters: BusinessPartnerGroupCreateSubmitRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.businessPartnerGroupCreateSubmitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for the Business Partner Group Edit Page
     */
    async businessPartnerGroupEditPageRaw(requestParameters: BusinessPartnerGroupEditPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessPartnerGroupEditPage>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling businessPartnerGroupEditPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/business-partner-groups/{id}/edit-page`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessPartnerGroupEditPageFromJSON(jsonValue));
    }

    /**
     * Collect all data for the Business Partner Group Edit Page
     */
    async businessPartnerGroupEditPage(requestParameters: BusinessPartnerGroupEditPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessPartnerGroupEditPage> {
        const response = await this.businessPartnerGroupEditPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit a Business Partner Group
     */
    async businessPartnerGroupEditSubmitRaw(requestParameters: BusinessPartnerGroupEditSubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling businessPartnerGroupEditSubmit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/business-partner-groups/{id}/edit-group`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BusinessPartnerGroupEditSubmitToJSON(requestParameters['businessPartnerGroupEditSubmit']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Edit a Business Partner Group
     */
    async businessPartnerGroupEditSubmit(requestParameters: BusinessPartnerGroupEditSubmitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.businessPartnerGroupEditSubmitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for the Business Partner Groups List Page
     */
    async businessPartnerGroupListPageRaw(requestParameters: BusinessPartnerGroupListPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BusinessPartnerGroupListPageEntry>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/business-partner-groups/list-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: BusinessPartnerGroupQueryToJSON(requestParameters['businessPartnerGroupQuery']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BusinessPartnerGroupListPageEntryFromJSON));
    }

    /**
     * Collect all data for the Business Partner Groups List Page
     */
    async businessPartnerGroupListPage(requestParameters: BusinessPartnerGroupListPageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BusinessPartnerGroupListPageEntry>> {
        const response = await this.businessPartnerGroupListPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Asset
     */
    async createAssetRaw(requestParameters: CreateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/asset-page/assets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UiAssetCreateRequestToJSON(requestParameters['uiAssetCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new Asset
     */
    async createAsset(requestParameters: CreateAssetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.createAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Contract Definition. Use [publishDataOffer] instead.
     * @deprecated
     */
    async createContractDefinitionRaw(requestParameters: CreateContractDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-definition-page/contract-definitions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContractDefinitionRequestToJSON(requestParameters['contractDefinitionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new Contract Definition. Use [publishDataOffer] instead.
     * @deprecated
     */
    async createContractDefinition(requestParameters: CreateContractDefinitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.createContractDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new asset, contract definition and optional policies. Uses the same id for the asset, the contract policy, the access policy and the contract definition
     */
    async createDataOfferRaw(requestParameters: CreateDataOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/create-data-offer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataOfferCreateRequestToJSON(requestParameters['dataOfferCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new asset, contract definition and optional policies. Uses the same id for the asset, the contract policy, the access policy and the contract definition
     */
    async createDataOffer(requestParameters: CreateDataOfferRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.createDataOfferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [Deprecated] Create a new Policy Definition from a list of constraints. Use createPolicyDefinitionV2 instead.
     * @deprecated
     */
    async createPolicyDefinitionRaw(requestParameters: CreatePolicyDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/policy-page/policy-definitions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyDefinitionCreateRequestToJSON(requestParameters['policyDefinitionCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * [Deprecated] Create a new Policy Definition from a list of constraints. Use createPolicyDefinitionV2 instead.
     * @deprecated
     */
    async createPolicyDefinition(requestParameters: CreatePolicyDefinitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.createPolicyDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Policy Definition
     */
    async createPolicyDefinitionV2Raw(requestParameters: CreatePolicyDefinitionV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/v2/pages/policy-page/policy-definitions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyDefinitionCreateDtoToJSON(requestParameters['policyDefinitionCreateDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new Policy Definition
     */
    async createPolicyDefinitionV2(requestParameters: CreatePolicyDefinitionV2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.createPolicyDefinitionV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Vault Secret
     */
    async createVaultSecretRaw(requestParameters: CreateVaultSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/vault-secrets/create-secret`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VaultSecretCreateSubmitToJSON(requestParameters['vaultSecretCreateSubmit']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new Vault Secret
     */
    async createVaultSecret(requestParameters: CreateVaultSecretRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.createVaultSecretRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an Asset
     */
    async deleteAssetRaw(requestParameters: DeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling deleteAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/asset-page/assets/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Delete an Asset
     */
    async deleteAsset(requestParameters: DeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.deleteAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Business Partner Group
     */
    async deleteBusinessPartnerGroupRaw(requestParameters: DeleteBusinessPartnerGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteBusinessPartnerGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/business-partner-groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Delete a Business Partner Group
     */
    async deleteBusinessPartnerGroup(requestParameters: DeleteBusinessPartnerGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.deleteBusinessPartnerGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Contract Definition
     */
    async deleteContractDefinitionRaw(requestParameters: DeleteContractDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['contractDefinitionId'] == null) {
            throw new runtime.RequiredError(
                'contractDefinitionId',
                'Required parameter "contractDefinitionId" was null or undefined when calling deleteContractDefinition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-definition-page/contract-definitions/{contractDefinitionId}`.replace(`{${"contractDefinitionId"}}`, encodeURIComponent(String(requestParameters['contractDefinitionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Delete a Contract Definition
     */
    async deleteContractDefinition(requestParameters: DeleteContractDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.deleteContractDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Policy Definition
     */
    async deletePolicyDefinitionRaw(requestParameters: DeletePolicyDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['policyId'] == null) {
            throw new runtime.RequiredError(
                'policyId',
                'Required parameter "policyId" was null or undefined when calling deletePolicyDefinition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/policy-page/policy-definitions/{policyId}`.replace(`{${"policyId"}}`, encodeURIComponent(String(requestParameters['policyId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Delete a Policy Definition
     */
    async deletePolicyDefinition(requestParameters: DeletePolicyDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.deletePolicyDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a vault secret
     */
    async deleteVaultSecretRaw(requestParameters: DeleteVaultSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling deleteVaultSecret().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/vault-secrets/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Delete a vault secret
     */
    async deleteVaultSecret(requestParameters: DeleteVaultSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.deleteVaultSecretRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an Asset\'s metadata and optionally also the data source.
     */
    async editAssetRaw(requestParameters: EditAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling editAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/asset-page/assets/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UiAssetEditRequestToJSON(requestParameters['uiAssetEditRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Updates an Asset\'s metadata and optionally also the data source.
     */
    async editAsset(requestParameters: EditAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.editAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an existing vault secret
     */
    async editVaultSecretRaw(requestParameters: EditVaultSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling editVaultSecret().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/vault-secrets/{key}/edit-secret`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VaultSecretEditSubmitToJSON(requestParameters['vaultSecretEditSubmit']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Edit an existing vault secret
     */
    async editVaultSecret(requestParameters: EditVaultSecretRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.editVaultSecretRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for the Edit Vault Secret Page
     */
    async editVaultSecretPageRaw(requestParameters: EditVaultSecretPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VaultSecretEditPage>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling editVaultSecretPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/vault-secrets/{key}/edit-secret`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VaultSecretEditPageFromJSON(jsonValue));
    }

    /**
     * Collect all data for the Edit Vault Secret Page
     */
    async editVaultSecretPage(requestParameters: EditVaultSecretPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VaultSecretEditPage> {
        const response = await this.editVaultSecretPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for Asset Page
     */
    async getAssetPageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetPage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/asset-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetPageFromJSON(jsonValue));
    }

    /**
     * Collect all data for Asset Page
     */
    async getAssetPage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetPage> {
        const response = await this.getAssetPageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetch a specific data offer from a connector
     */
    async getCatalogPageDataOfferRaw(requestParameters: GetCatalogPageDataOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiDataOffer>> {
        if (requestParameters['participantId'] == null) {
            throw new runtime.RequiredError(
                'participantId',
                'Required parameter "participantId" was null or undefined when calling getCatalogPageDataOffer().'
            );
        }

        if (requestParameters['connectorEndpoint'] == null) {
            throw new runtime.RequiredError(
                'connectorEndpoint',
                'Required parameter "connectorEndpoint" was null or undefined when calling getCatalogPageDataOffer().'
            );
        }

        if (requestParameters['dataOfferId'] == null) {
            throw new runtime.RequiredError(
                'dataOfferId',
                'Required parameter "dataOfferId" was null or undefined when calling getCatalogPageDataOffer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/catalog-page/{connectorEndpoint}/{participantId}/data-offers/{dataOfferId}`.replace(`{${"participantId"}}`, encodeURIComponent(String(requestParameters['participantId']))).replace(`{${"connectorEndpoint"}}`, encodeURIComponent(String(requestParameters['connectorEndpoint']))).replace(`{${"dataOfferId"}}`, encodeURIComponent(String(requestParameters['dataOfferId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiDataOfferFromJSON(jsonValue));
    }

    /**
     * Fetch a specific data offer from a connector
     */
    async getCatalogPageDataOffer(requestParameters: GetCatalogPageDataOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiDataOffer> {
        const response = await this.getCatalogPageDataOfferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch a connector\'s data offers
     */
    async getCatalogPageDataOffersRaw(requestParameters: GetCatalogPageDataOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UiDataOffer>>> {
        const queryParameters: any = {};

        if (requestParameters['participantId'] != null) {
            queryParameters['participantId'] = requestParameters['participantId'];
        }

        if (requestParameters['connectorEndpoint'] != null) {
            queryParameters['connectorEndpoint'] = requestParameters['connectorEndpoint'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/catalog-page/data-offers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UiDataOfferFromJSON));
    }

    /**
     * Fetch a connector\'s data offers
     */
    async getCatalogPageDataOffers(requestParameters: GetCatalogPageDataOffersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UiDataOffer>> {
        const response = await this.getCatalogPageDataOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single contract agreement card by its identifier
     */
    async getContractAgreementCardRaw(requestParameters: GetContractAgreementCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContractAgreementCard>> {
        if (requestParameters['contractAgreementId'] == null) {
            throw new runtime.RequiredError(
                'contractAgreementId',
                'Required parameter "contractAgreementId" was null or undefined when calling getContractAgreementCard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-agreement-page/{contractAgreementId}`.replace(`{${"contractAgreementId"}}`, encodeURIComponent(String(requestParameters['contractAgreementId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContractAgreementCardFromJSON(jsonValue));
    }

    /**
     * Get a single contract agreement card by its identifier
     */
    async getContractAgreementCard(requestParameters: GetContractAgreementCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContractAgreementCard> {
        const response = await this.getContractAgreementCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collect filtered data for the Contract Agreement Page
     */
    async getContractAgreementPageRaw(requestParameters: GetContractAgreementPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContractAgreementPage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-agreement-page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContractAgreementPageQueryToJSON(requestParameters['contractAgreementPageQuery']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContractAgreementPageFromJSON(jsonValue));
    }

    /**
     * Collect filtered data for the Contract Agreement Page
     */
    async getContractAgreementPage(requestParameters: GetContractAgreementPageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContractAgreementPage> {
        const response = await this.getContractAgreementPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for Contract Definition Page
     * @deprecated
     */
    async getContractDefinitionPageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContractDefinitionPage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-definition-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContractDefinitionPageFromJSON(jsonValue));
    }

    /**
     * Collect all data for Contract Definition Page
     * @deprecated
     */
    async getContractDefinitionPage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContractDefinitionPage> {
        const response = await this.getContractDefinitionPageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Contract Negotiation Information
     */
    async getContractNegotiationRaw(requestParameters: GetContractNegotiationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiContractNegotiation>> {
        if (requestParameters['contractNegotiationId'] == null) {
            throw new runtime.RequiredError(
                'contractNegotiationId',
                'Required parameter "contractNegotiationId" was null or undefined when calling getContractNegotiation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/catalog-page/contract-negotiations/{contractNegotiationId}`.replace(`{${"contractNegotiationId"}}`, encodeURIComponent(String(requestParameters['contractNegotiationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiContractNegotiationFromJSON(jsonValue));
    }

    /**
     * Get Contract Negotiation Information
     */
    async getContractNegotiation(requestParameters: GetContractNegotiationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiContractNegotiation> {
        const response = await this.getContractNegotiationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for the Dashboard Page
     */
    async getDashboardPageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardPage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/dashboard-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardPageFromJSON(jsonValue));
    }

    /**
     * Collect all data for the Dashboard Page
     */
    async getDashboardPage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardPage> {
        const response = await this.getDashboardPageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for Policy Definition Page
     */
    async getPolicyDefinitionPageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PolicyDefinitionPage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/policy-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicyDefinitionPageFromJSON(jsonValue));
    }

    /**
     * Collect all data for Policy Definition Page
     */
    async getPolicyDefinitionPage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PolicyDefinitionPage> {
        const response = await this.getPolicyDefinitionPageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for the Transfer History Page
     */
    async getTransferHistoryPageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferHistoryPage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/transfer-history-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferHistoryPageFromJSON(jsonValue));
    }

    /**
     * Collect all data for the Transfer History Page
     */
    async getTransferHistoryPage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferHistoryPage> {
        const response = await this.getTransferHistoryPageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Queries a transfer process\' asset
     */
    async getTransferProcessAssetRaw(requestParameters: GetTransferProcessAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiAsset>> {
        if (requestParameters['transferProcessId'] == null) {
            throw new runtime.RequiredError(
                'transferProcessId',
                'Required parameter "transferProcessId" was null or undefined when calling getTransferProcessAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/transfer-history-page/transfer-processes/{transferProcessId}/asset`.replace(`{${"transferProcessId"}}`, encodeURIComponent(String(requestParameters['transferProcessId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiAssetFromJSON(jsonValue));
    }

    /**
     * Queries a transfer process\' asset
     */
    async getTransferProcessAsset(requestParameters: GetTransferProcessAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiAsset> {
        const response = await this.getTransferProcessAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiate a new Contract Negotiation
     */
    async initiateContractNegotiationRaw(requestParameters: InitiateContractNegotiationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiContractNegotiation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/catalog-page/contract-negotiations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContractNegotiationRequestToJSON(requestParameters['contractNegotiationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiContractNegotiationFromJSON(jsonValue));
    }

    /**
     * Initiate a new Contract Negotiation
     */
    async initiateContractNegotiation(requestParameters: InitiateContractNegotiationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiContractNegotiation> {
        const response = await this.initiateContractNegotiationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiate a Transfer Process via a custom Transfer Process JSON-LD. Fields such as connectorId, assetId, providerConnectorId, providerConnectorAddress will be set automatically.
     */
    async initiateCustomTransferRaw(requestParameters: InitiateCustomTransferOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-agreement-page/transfers/custom`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InitiateCustomTransferRequestToJSON(requestParameters['initiateCustomTransferRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Initiate a Transfer Process via a custom Transfer Process JSON-LD. Fields such as connectorId, assetId, providerConnectorId, providerConnectorAddress will be set automatically.
     */
    async initiateCustomTransfer(requestParameters: InitiateCustomTransferOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.initiateCustomTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiate a Transfer Process. Deprecated. Use initiateTransferV2 instead
     * @deprecated
     */
    async initiateTransferRaw(requestParameters: InitiateTransferOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-agreement-page/transfers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InitiateTransferRequestToJSON(requestParameters['initiateTransferRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Initiate a Transfer Process. Deprecated. Use initiateTransferV2 instead
     * @deprecated
     */
    async initiateTransfer(requestParameters: InitiateTransferOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.initiateTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiate a Transfer Process. V2 Endpoint with support for Callback Addresses and well-typed data sinks
     */
    async initiateTransferV2Raw(requestParameters: InitiateTransferV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-agreement-page/initiate-transfer-v2`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UiInitiateTransferRequestToJSON(requestParameters['uiInitiateTransferRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Initiate a Transfer Process. V2 Endpoint with support for Callback Addresses and well-typed data sinks
     */
    async initiateTransferV2(requestParameters: InitiateTransferV2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.initiateTransferV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validates if the provided assetId is already taken
     */
    async isAssetIdAvailableRaw(requestParameters: IsAssetIdAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdAvailabilityResponse>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling isAssetIdAvailable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/data-offer-page/validate-asset-id/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     * Validates if the provided assetId is already taken
     */
    async isAssetIdAvailable(requestParameters: IsAssetIdAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdAvailabilityResponse> {
        const response = await this.isAssetIdAvailableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validates if the provided contractDefinitionId is already taken
     */
    async isContractDefinitionIdAvailableRaw(requestParameters: IsContractDefinitionIdAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdAvailabilityResponse>> {
        if (requestParameters['contractDefinitionId'] == null) {
            throw new runtime.RequiredError(
                'contractDefinitionId',
                'Required parameter "contractDefinitionId" was null or undefined when calling isContractDefinitionIdAvailable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/data-offer-page/validate-contract-definition-id/{contractDefinitionId}`.replace(`{${"contractDefinitionId"}}`, encodeURIComponent(String(requestParameters['contractDefinitionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     * Validates if the provided contractDefinitionId is already taken
     */
    async isContractDefinitionIdAvailable(requestParameters: IsContractDefinitionIdAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdAvailabilityResponse> {
        const response = await this.isContractDefinitionIdAvailableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validates if the provided policyId is already taken
     */
    async isPolicyIdAvailableRaw(requestParameters: IsPolicyIdAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdAvailabilityResponse>> {
        if (requestParameters['policyId'] == null) {
            throw new runtime.RequiredError(
                'policyId',
                'Required parameter "policyId" was null or undefined when calling isPolicyIdAvailable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/data-offer-page/validate-policy-id/{policyId}`.replace(`{${"policyId"}}`, encodeURIComponent(String(requestParameters['policyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     * Validates if the provided policyId is already taken
     */
    async isPolicyIdAvailable(requestParameters: IsPolicyIdAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdAvailabilityResponse> {
        const response = await this.isPolicyIdAvailableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for the Vault Secrets List Page
     */
    async listVaultSecretsPageRaw(requestParameters: ListVaultSecretsPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VaultSecretListPageEntry>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/vault-secrets/list-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: VaultSecretQueryToJSON(requestParameters['vaultSecretQuery']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VaultSecretListPageEntryFromJSON));
    }

    /**
     * Collect all data for the Vault Secrets List Page
     */
    async listVaultSecretsPage(requestParameters: ListVaultSecretsPageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VaultSecretListPageEntry>> {
        const response = await this.listVaultSecretsPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Terminates a contract agreement designated by its contract agreement id.
     */
    async terminateContractAgreementRaw(requestParameters: TerminateContractAgreementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['contractAgreementId'] == null) {
            throw new runtime.RequiredError(
                'contractAgreementId',
                'Required parameter "contractAgreementId" was null or undefined when calling terminateContractAgreement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/content-agreement-page/{contractAgreementId}/terminate`.replace(`{${"contractAgreementId"}}`, encodeURIComponent(String(requestParameters['contractAgreementId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContractTerminationRequestToJSON(requestParameters['contractTerminationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Terminates a contract agreement designated by its contract agreement id.
     */
    async terminateContractAgreement(requestParameters: TerminateContractAgreementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.terminateContractAgreementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the UI configuration
     */
    async uiConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiConfig>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiConfigFromJSON(jsonValue));
    }

    /**
     * Get the UI configuration
     */
    async uiConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiConfig> {
        const response = await this.uiConfigRaw(initOverrides);
        return await response.value();
    }

}
