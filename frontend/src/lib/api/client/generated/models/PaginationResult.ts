/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Pagination Info for Table Pages
 * @export
 * @interface PaginationResult
 */
export interface PaginationResult {
    /**
     * Number of items on all pages.
     * @type {number}
     * @memberof PaginationResult
     */
    totalItems: number;
    /**
     * Index of the last page. 1 Based
     * @type {number}
     * @memberof PaginationResult
     */
    lastPage: number;
    /**
     * Index of the previous page. 1 Based
     * @type {number}
     * @memberof PaginationResult
     */
    previousPage?: number;
    /**
     * Index of the current page. 1 Based
     * @type {number}
     * @memberof PaginationResult
     */
    currentPage: number;
    /**
     * Index of the next page. 1 Based
     * @type {number}
     * @memberof PaginationResult
     */
    nextPage?: number;
    /**
     * Index of the item at the start of the current page. 1 Based. 0 if empty page
     * @type {number}
     * @memberof PaginationResult
     */
    pageStart: number;
    /**
     * Index of the item at the end of the current page. 1 Based. 0 if empty page
     * @type {number}
     * @memberof PaginationResult
     */
    pageEnd: number;
    /**
     * Size of the current page.
     * @type {number}
     * @memberof PaginationResult
     */
    pageSize: number;
}

/**
 * Check if a given object implements the PaginationResult interface.
 */
export function instanceOfPaginationResult(value: any): value is PaginationResult {
    if (!('totalItems' in value) || value['totalItems'] === undefined) return false;
    if (!('lastPage' in value) || value['lastPage'] === undefined) return false;
    if (!('currentPage' in value) || value['currentPage'] === undefined) return false;
    if (!('pageStart' in value) || value['pageStart'] === undefined) return false;
    if (!('pageEnd' in value) || value['pageEnd'] === undefined) return false;
    if (!('pageSize' in value) || value['pageSize'] === undefined) return false;
    return true;
}

export function PaginationResultFromJSON(json: any): PaginationResult {
    return PaginationResultFromJSONTyped(json, false);
}

export function PaginationResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaginationResult {
    if (json == null) {
        return json;
    }
    return {
        
        'totalItems': json['totalItems'],
        'lastPage': json['lastPage'],
        'previousPage': json['previousPage'] == null ? undefined : json['previousPage'],
        'currentPage': json['currentPage'],
        'nextPage': json['nextPage'] == null ? undefined : json['nextPage'],
        'pageStart': json['pageStart'],
        'pageEnd': json['pageEnd'],
        'pageSize': json['pageSize'],
    };
}

export function PaginationResultToJSON(json: any): PaginationResult {
    return PaginationResultToJSONTyped(json, false);
}

export function PaginationResultToJSONTyped(value?: PaginationResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'totalItems': value['totalItems'],
        'lastPage': value['lastPage'],
        'previousPage': value['previousPage'],
        'currentPage': value['currentPage'],
        'nextPage': value['nextPage'],
        'pageStart': value['pageStart'],
        'pageEnd': value['pageEnd'],
        'pageSize': value['pageSize'],
    };
}

