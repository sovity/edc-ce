/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CallbackAddressEventType } from './CallbackAddressEventType';
import {
    CallbackAddressEventTypeFromJSON,
    CallbackAddressEventTypeFromJSONTyped,
    CallbackAddressEventTypeToJSON,
    CallbackAddressEventTypeToJSONTyped,
} from './CallbackAddressEventType';

/**
 * Callback address to be called after a transfer or negotiation success/failure
 * @export
 * @interface CallbackAddressDto
 */
export interface CallbackAddressDto {
    /**
     * URL to be called when the event is fired
     * @type {string}
     * @memberof CallbackAddressDto
     */
    url: string;
    /**
     * Event Types to subscribe to. 
     * @type {Array<CallbackAddressEventType>}
     * @memberof CallbackAddressDto
     */
    events: Array<CallbackAddressEventType>;
    /**
     * Authentication: Header Name
     * @type {string}
     * @memberof CallbackAddressDto
     */
    authHeaderName?: string;
    /**
     * Authentication: Header Value (Vault Secret Name)
     * @type {string}
     * @memberof CallbackAddressDto
     */
    authHeaderVaultSecretName?: string;
}

/**
 * Check if a given object implements the CallbackAddressDto interface.
 */
export function instanceOfCallbackAddressDto(value: any): value is CallbackAddressDto {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('events' in value) || value['events'] === undefined) return false;
    return true;
}

export function CallbackAddressDtoFromJSON(json: any): CallbackAddressDto {
    return CallbackAddressDtoFromJSONTyped(json, false);
}

export function CallbackAddressDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CallbackAddressDto {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'events': ((json['events'] as Array<any>).map(CallbackAddressEventTypeFromJSON)),
        'authHeaderName': json['authHeaderName'] == null ? undefined : json['authHeaderName'],
        'authHeaderVaultSecretName': json['authHeaderVaultSecretName'] == null ? undefined : json['authHeaderVaultSecretName'],
    };
}

export function CallbackAddressDtoToJSON(json: any): CallbackAddressDto {
    return CallbackAddressDtoToJSONTyped(json, false);
}

export function CallbackAddressDtoToJSONTyped(value?: CallbackAddressDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'url': value['url'],
        'events': ((value['events'] as Array<any>).map(CallbackAddressEventTypeToJSON)),
        'authHeaderName': value['authHeaderName'],
        'authHeaderVaultSecretName': value['authHeaderVaultSecretName'],
    };
}

