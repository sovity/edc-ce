/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * OAuth 2 shared secret authorization. This uses the OAuth2 client credentials flow.
 * @export
 * @interface UiHttpOauth2SharedSecretAuthorization
 */
export interface UiHttpOauth2SharedSecretAuthorization {
    /**
     * The client identifier.
     * @type {string}
     * @memberof UiHttpOauth2SharedSecretAuthorization
     */
    clientId: string;
    /**
     * The key with which the shared secret for authenticating to the Oauth2 server is stored into the Vault.
     * @type {string}
     * @memberof UiHttpOauth2SharedSecretAuthorization
     */
    clientSecretName: string;
}

/**
 * Check if a given object implements the UiHttpOauth2SharedSecretAuthorization interface.
 */
export function instanceOfUiHttpOauth2SharedSecretAuthorization(value: any): value is UiHttpOauth2SharedSecretAuthorization {
    if (!('clientId' in value) || value['clientId'] === undefined) return false;
    if (!('clientSecretName' in value) || value['clientSecretName'] === undefined) return false;
    return true;
}

export function UiHttpOauth2SharedSecretAuthorizationFromJSON(json: any): UiHttpOauth2SharedSecretAuthorization {
    return UiHttpOauth2SharedSecretAuthorizationFromJSONTyped(json, false);
}

export function UiHttpOauth2SharedSecretAuthorizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiHttpOauth2SharedSecretAuthorization {
    if (json == null) {
        return json;
    }
    return {
        
        'clientId': json['clientId'],
        'clientSecretName': json['clientSecretName'],
    };
}

export function UiHttpOauth2SharedSecretAuthorizationToJSON(json: any): UiHttpOauth2SharedSecretAuthorization {
    return UiHttpOauth2SharedSecretAuthorizationToJSONTyped(json, false);
}

export function UiHttpOauth2SharedSecretAuthorizationToJSONTyped(value?: UiHttpOauth2SharedSecretAuthorization | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'clientId': value['clientId'],
        'clientSecretName': value['clientSecretName'],
    };
}

