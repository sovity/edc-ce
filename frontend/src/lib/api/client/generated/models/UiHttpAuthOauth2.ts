/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UiHttpOauth2SharedSecretAuthorization } from './UiHttpOauth2SharedSecretAuthorization';
import {
    UiHttpOauth2SharedSecretAuthorizationFromJSON,
    UiHttpOauth2SharedSecretAuthorizationFromJSONTyped,
    UiHttpOauth2SharedSecretAuthorizationToJSON,
    UiHttpOauth2SharedSecretAuthorizationToJSONTyped,
} from './UiHttpOauth2SharedSecretAuthorization';
import type { UiHttpOauth2AuthType } from './UiHttpOauth2AuthType';
import {
    UiHttpOauth2AuthTypeFromJSON,
    UiHttpOauth2AuthTypeFromJSONTyped,
    UiHttpOauth2AuthTypeToJSON,
    UiHttpOauth2AuthTypeToJSONTyped,
} from './UiHttpOauth2AuthType';
import type { UiHttpOauth2PrivateKeyAuthorization } from './UiHttpOauth2PrivateKeyAuthorization';
import {
    UiHttpOauth2PrivateKeyAuthorizationFromJSON,
    UiHttpOauth2PrivateKeyAuthorizationFromJSONTyped,
    UiHttpOauth2PrivateKeyAuthorizationToJSON,
    UiHttpOauth2PrivateKeyAuthorizationToJSONTyped,
} from './UiHttpOauth2PrivateKeyAuthorization';

/**
 * OAuth 2 authentication information
 * @export
 * @interface UiHttpAuthOauth2
 */
export interface UiHttpAuthOauth2 {
    /**
     * The token URL where the access-token can be fetched from.
     * @type {string}
     * @memberof UiHttpAuthOauth2
     */
    tokenUrl: string;
    /**
     * (optional) The requested scope.
     * @type {string}
     * @memberof UiHttpAuthOauth2
     */
    scope?: string;
    /**
     * The type of credential.
     * @type {UiHttpOauth2AuthType}
     * @memberof UiHttpAuthOauth2
     */
    type: UiHttpOauth2AuthType;
    /**
     * Required if type=PRIVATE_KEY. For private key-based authorization.
     * @type {UiHttpOauth2PrivateKeyAuthorization}
     * @memberof UiHttpAuthOauth2
     */
    privateKey?: UiHttpOauth2PrivateKeyAuthorization;
    /**
     * Required if type=SHARED_SECRET. For shared secret-based authorization.
     * @type {UiHttpOauth2SharedSecretAuthorization}
     * @memberof UiHttpAuthOauth2
     */
    sharedSecret?: UiHttpOauth2SharedSecretAuthorization;
}



/**
 * Check if a given object implements the UiHttpAuthOauth2 interface.
 */
export function instanceOfUiHttpAuthOauth2(value: any): value is UiHttpAuthOauth2 {
    if (!('tokenUrl' in value) || value['tokenUrl'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function UiHttpAuthOauth2FromJSON(json: any): UiHttpAuthOauth2 {
    return UiHttpAuthOauth2FromJSONTyped(json, false);
}

export function UiHttpAuthOauth2FromJSONTyped(json: any, ignoreDiscriminator: boolean): UiHttpAuthOauth2 {
    if (json == null) {
        return json;
    }
    return {
        
        'tokenUrl': json['tokenUrl'],
        'scope': json['scope'] == null ? undefined : json['scope'],
        'type': UiHttpOauth2AuthTypeFromJSON(json['type']),
        'privateKey': json['privateKey'] == null ? undefined : UiHttpOauth2PrivateKeyAuthorizationFromJSON(json['privateKey']),
        'sharedSecret': json['sharedSecret'] == null ? undefined : UiHttpOauth2SharedSecretAuthorizationFromJSON(json['sharedSecret']),
    };
}

export function UiHttpAuthOauth2ToJSON(json: any): UiHttpAuthOauth2 {
    return UiHttpAuthOauth2ToJSONTyped(json, false);
}

export function UiHttpAuthOauth2ToJSONTyped(value?: UiHttpAuthOauth2 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'tokenUrl': value['tokenUrl'],
        'scope': value['scope'],
        'type': UiHttpOauth2AuthTypeToJSON(value['type']),
        'privateKey': UiHttpOauth2PrivateKeyAuthorizationToJSON(value['privateKey']),
        'sharedSecret': UiHttpOauth2SharedSecretAuthorizationToJSON(value['sharedSecret']),
    };
}

