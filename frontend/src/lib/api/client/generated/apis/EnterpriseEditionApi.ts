/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConnectorLimits,
  UiAssetCreateRequest,
} from '../models/index';
import {
    ConnectorLimitsFromJSON,
    ConnectorLimitsToJSON,
    UiAssetCreateRequestFromJSON,
    UiAssetCreateRequestToJSON,
} from '../models/index';

export interface FileUploadCreateAssetRequest {
    blobId: string;
    uiAssetCreateRequest: UiAssetCreateRequest;
}

/**
 * 
 */
export class EnterpriseEditionApi extends runtime.BaseAPI {

    /**
     * Available and used resources of a connector.
     */
    async connectorLimitsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConnectorLimits>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ee/connector-limits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectorLimitsFromJSON(jsonValue));
    }

    /**
     * Available and used resources of a connector.
     */
    async connectorLimits(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConnectorLimits> {
        const response = await this.connectorLimitsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates an asset using the uploaded file as data source.
     * Create an asset from an uploaded file.
     */
    async fileUploadCreateAssetRaw(requestParameters: FileUploadCreateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['blobId'] == null) {
            throw new runtime.RequiredError(
                'blobId',
                'Required parameter "blobId" was null or undefined when calling fileUploadCreateAsset().'
            );
        }

        if (requestParameters['uiAssetCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'uiAssetCreateRequest',
                'Required parameter "uiAssetCreateRequest" was null or undefined when calling fileUploadCreateAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ee/file-upload/blobs/{blobId}/asset`.replace(`{${"blobId"}}`, encodeURIComponent(String(requestParameters['blobId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UiAssetCreateRequestToJSON(requestParameters['uiAssetCreateRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates an asset using the uploaded file as data source.
     * Create an asset from an uploaded file.
     */
    async fileUploadCreateAsset(requestParameters: FileUploadCreateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.fileUploadCreateAssetRaw(requestParameters, initOverrides);
    }

    /**
     * Requests a Blob URL with a SAS Token so that the UI can directly upload the file to the Azure Blob Storage. Returns the Blob ID / Token.
     * Requests a Blob for file upload.
     */
    async fileUploadRequestSasTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ee/file-upload/blobs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Requests a Blob URL with a SAS Token so that the UI can directly upload the file to the Azure Blob Storage. Returns the Blob ID / Token.
     * Requests a Blob for file upload.
     */
    async fileUploadRequestSasToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.fileUploadRequestSasTokenRaw(initOverrides);
        return await response.value();
    }

}
