/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CatalogQuery,
  KpiResult,
  UiDataOffer,
} from '../models/index';
import {
    CatalogQueryFromJSON,
    CatalogQueryToJSON,
    KpiResultFromJSON,
    KpiResultToJSON,
    UiDataOfferFromJSON,
    UiDataOfferToJSON,
} from '../models/index';

export interface QueryCatalogRequest {
    catalogQuery: CatalogQuery;
}

/**
 * 
 */
export class UseCaseApi extends runtime.BaseAPI {

    /**
     * Basic KPIs about the running EDC Connector.
     */
    async getKpisRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KpiResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/use-case-api/kpis`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KpiResultFromJSON(jsonValue));
    }

    /**
     * Basic KPIs about the running EDC Connector.
     */
    async getKpis(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KpiResult> {
        const response = await this.getKpisRaw(initOverrides);
        return await response.value();
    }

    /**
     * List available functions in policies, prohibitions and obligations.
     */
    async getSupportedFunctionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/use-case-api/supported-policy-functions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List available functions in policies, prohibitions and obligations.
     */
    async getSupportedFunctions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getSupportedFunctionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetch a connector\'s data offers
     */
    async queryCatalogRaw(requestParameters: QueryCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UiDataOffer>>> {
        if (requestParameters['catalogQuery'] == null) {
            throw new runtime.RequiredError(
                'catalogQuery',
                'Required parameter "catalogQuery" was null or undefined when calling queryCatalog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/use-case-api/catalog`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CatalogQueryToJSON(requestParameters['catalogQuery']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UiDataOfferFromJSON));
    }

    /**
     * Fetch a connector\'s data offers
     */
    async queryCatalog(requestParameters: QueryCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UiDataOffer>> {
        const response = await this.queryCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
