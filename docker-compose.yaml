version: "3.8"
services:
  edc-ui:
    image: ${EDC_UI_IMAGE}
    ports:
      - '11000:8080'
      - '11015:5005'
    environment:
      EDC_UI_ACTIVE_PROFILE: ${EDC_UI_ACTIVE_PROFILE}
      EDC_UI_CONFIG_URL: edc-ui-config
      EDC_UI_MANAGEMENT_API_URL: http://localhost:11002/api/management
      EDC_UI_MANAGEMENT_API_KEY: ApiKeyDefaultValue
      EDC_UI_CATALOG_URLS: http://edc2:11003/api/dsp
      EDC_UI_MANAGEMENT_API_URL_SHOWN_IN_DASHBOARD: http://localhost:11002/control/api/management
      NGINX_ACCESS_LOG: off

  edc:
    image: ${EDC_IMAGE}
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      MY_EDC_PARTICIPANT_ID: "my-edc"
      MY_EDC_TITLE: "EDC Connector"
      MY_EDC_DESCRIPTION: "sovity Community Edition EDC Connector"
      MY_EDC_CURATOR_URL: "https://example.com"
      MY_EDC_CURATOR_NAME: "Example GmbH"
      MY_EDC_MAINTAINER_URL: "https://sovity.de"
      MY_EDC_MAINTAINER_NAME: "sovity GmbH"

      MY_EDC_FQDN: "edc"
      EDC_API_AUTH_KEY: ApiKeyDefaultValue

      MY_EDC_JDBC_URL: jdbc:postgresql://postgresql:5432/edc
      MY_EDC_JDBC_USER: edc
      MY_EDC_JDBC_PASSWORD: edc

      # docker compose local dev environment overrides (don't use with non-dev images)
      MY_EDC_PROTOCOL: "http://"
      EDC_DSP_CALLBACK_ADDRESS: http://edc:11003/api/dsp
      EDC_WEB_REST_CORS_ENABLED: 'true'
      EDC_WEB_REST_CORS_HEADERS: 'origin,content-type,accept,authorization,X-Api-Key'
      EDC_WEB_REST_CORS_ORIGINS: '*'
      EDC_AGENT_IDENTITY_KEY: 'client_id' # required for Mock IAM to work
    ports:
      - '11001:11001'
      - '11002:11002'
      - '11003:11003'
      - '11004:11004'
      - '11005:5005'

  edc-ui2:
    image: ${EDC_UI_IMAGE}
    ports:
      - '22000:8080'
    environment:
      EDC_UI_ACTIVE_PROFILE: ${EDC_UI_ACTIVE_PROFILE}
      EDC_UI_CONFIG_URL: edc-ui-config
      EDC_UI_MANAGEMENT_API_URL: http://localhost:22002/api/management
      EDC_UI_MANAGEMENT_API_KEY: ApiKeyDefaultValue
      EDC_UI_CATALOG_URLS: http://edc:11003/api/dsp
      NGINX_ACCESS_LOG: off

  edc2:
    image: ${EDC_IMAGE}
    depends_on:
      postgresql2:
        condition: service_healthy
    environment:
      MY_EDC_PARTICIPANT_ID: "my-edc2"
      MY_EDC_TITLE: "EDC Connector 2"
      MY_EDC_DESCRIPTION: "sovity Community Edition EDC Connector"
      MY_EDC_CURATOR_URL: "https://example.com"
      MY_EDC_CURATOR_NAME: "Example GmbH"
      MY_EDC_MAINTAINER_URL: "https://sovity.de"
      MY_EDC_MAINTAINER_NAME: "sovity GmbH"

      MY_EDC_FQDN: "edc2"
      EDC_API_AUTH_KEY: ApiKeyDefaultValue

      MY_EDC_JDBC_URL: jdbc:postgresql://postgresql2:5432/edc
      MY_EDC_JDBC_USER: edc
      MY_EDC_JDBC_PASSWORD: edc

      # docker compose local dev environment overrides (don't use with non-dev images)
      MY_EDC_PROTOCOL: "http://"
      EDC_DSP_CALLBACK_ADDRESS: http://edc2:11003/api/dsp
      EDC_WEB_REST_CORS_ENABLED: 'true'
      EDC_WEB_REST_CORS_HEADERS: 'origin,content-type,accept,authorization,X-Api-Key'
      EDC_WEB_REST_CORS_ORIGINS: '*'
      EDC_AGENT_IDENTITY_KEY: 'client_id' # required for Mock IAM to work
    ports:
      - '22001:11001'
      - '22002:11002'
      - '22003:11003'
      - '22004:11004'
      - '22005:5005'

  test-backend:
    image: ${TEST_BACKEND_IMAGE}
    ports:
      - '33001:11001'

  broker:
    image: ${BROKER_IMAGE}
    depends_on:
      broker-postgresql:
        condition: service_healthy
      edc:
        condition: service_started
      edc2:
        condition: service_started
    environment:
      EDC_BROKER_SERVER_KNOWN_CONNECTORS: "http://edc:11003/api/dsp,http://edc2:11003/api/dsp"
      EDC_BROKER_SERVER_KNOWN_DATASPACE_CONNECTORS: "Mobilithek=https://some-other-connector/api/dsp"

      # Hide offline data offers after 1 minute in dev
      EDC_BROKER_SERVER_HIDE_OFFLINE_DATA_OFFERS_AFTER: "PT1M"

      MY_EDC_FQDN: "broker"
      EDC_API_AUTH_KEY: ApiKeyDefaultValue

      MY_EDC_JDBC_URL: jdbc:postgresql://localhost:55432/portal
      MY_EDC_JDBC_USER: portal
      MY_EDC_JDBC_PASSWORD: portal

      # docker compose local dev environment overrides (don't use with non-dev images)
      MY_EDC_PROTOCOL: "http://"
      EDC_DSP_CALLBACK_ADDRESS: http://broker:44003/backend/api/dsp
      EDC_WEB_REST_CORS_ENABLED: 'true'
      EDC_WEB_REST_CORS_HEADERS: 'origin,content-type,accept,authorization,x-api-key'
      EDC_WEB_REST_CORS_ORIGINS: '*'
      EDC_AGENT_IDENTITY_KEY: 'client_id' # required for Mock IAM to work
    ports:
      - '44001:11001'
      - '44002:11002'
      - '44003:11003'
      - '44004:11004'
      - '44005:5005'

  postgresql:
    image: docker.io/bitnami/postgresql:15
    restart: always
    environment:
      POSTGRESQL_USERNAME: edc
      POSTGRESQL_PASSWORD: edc
      POSTGRESQL_DATABASE: edc
    ports:
      - '54321:5432'
    volumes:
      - 'postgresql:/bitnami/postgresql'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U edc" ]
      interval: 1s
      timeout: 5s
      retries: 10

  postgresql2:
    image: docker.io/bitnami/postgresql:15
    restart: always
    environment:
      POSTGRESQL_USERNAME: edc
      POSTGRESQL_PASSWORD: edc
      POSTGRESQL_DATABASE: edc
    ports:
      - '54322:5432'
    volumes:
      - 'postgresql2:/bitnami/postgresql'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U edc" ]
      interval: 1s
      timeout: 5s
      retries: 10

volumes:
  postgresql:
    driver: local
  postgresql2:
    driver: local
  broker-postgresql:
    driver: local
