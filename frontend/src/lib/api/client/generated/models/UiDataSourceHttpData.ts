/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UiDataSourceHttpDataMethod } from './UiDataSourceHttpDataMethod';
import {
    UiDataSourceHttpDataMethodFromJSON,
    UiDataSourceHttpDataMethodFromJSONTyped,
    UiDataSourceHttpDataMethodToJSON,
    UiDataSourceHttpDataMethodToJSONTyped,
} from './UiDataSourceHttpDataMethod';
import type { SecretValue } from './SecretValue';
import {
    SecretValueFromJSON,
    SecretValueFromJSONTyped,
    SecretValueToJSON,
    SecretValueToJSONTyped,
} from './SecretValue';

/**
 * HTTP_DATA type Data Source.
 * @export
 * @interface UiDataSourceHttpData
 */
export interface UiDataSourceHttpData {
    /**
     * HTTP Request Method
     * @type {UiDataSourceHttpDataMethod}
     * @memberof UiDataSourceHttpData
     */
    method?: UiDataSourceHttpDataMethod;
    /**
     * HTTP Request URL. If parameterized, additional pathParams will be joined onto existing one.
     * @type {string}
     * @memberof UiDataSourceHttpData
     */
    baseUrl: string;
    /**
     * HTTP Request Query Params / Query String.
     * @type {string}
     * @memberof UiDataSourceHttpData
     */
    queryString?: string;
    /**
     * Auth Header name. The auth header is handled specially by the EDC as its value can be read from a vault.
     * @type {string}
     * @memberof UiDataSourceHttpData
     */
    authHeaderName?: string;
    /**
     * Auth Header value.
     * @type {SecretValue}
     * @memberof UiDataSourceHttpData
     */
    authHeaderValue?: SecretValue;
    /**
     * HTTP Request Headers. HTTP Header Parameterization is not available.
     * @type {{ [key: string]: string; }}
     * @memberof UiDataSourceHttpData
     */
    headers?: { [key: string]: string; };
    /**
     * Enable Method Parameterization. This forces consumers to provide a method, otherwise the transfer will fail.
     * @type {boolean}
     * @memberof UiDataSourceHttpData
     */
    enableMethodParameterization?: boolean;
    /**
     * Enable Path Parameterization.
     * @type {boolean}
     * @memberof UiDataSourceHttpData
     */
    enablePathParameterization?: boolean;
    /**
     * Enable Query Parameterization. Any additionally provided queryString will be merged with the existing one.
     * @type {boolean}
     * @memberof UiDataSourceHttpData
     */
    enableQueryParameterization?: boolean;
    /**
     * Enable Body Parameterization. Forces the provider to provide both a request body and a content type. Only Methods POST, PUT and PATCH allow request bodies.
     * @type {boolean}
     * @memberof UiDataSourceHttpData
     */
    enableBodyParameterization?: boolean;
}



/**
 * Check if a given object implements the UiDataSourceHttpData interface.
 */
export function instanceOfUiDataSourceHttpData(value: any): value is UiDataSourceHttpData {
    if (!('baseUrl' in value) || value['baseUrl'] === undefined) return false;
    return true;
}

export function UiDataSourceHttpDataFromJSON(json: any): UiDataSourceHttpData {
    return UiDataSourceHttpDataFromJSONTyped(json, false);
}

export function UiDataSourceHttpDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiDataSourceHttpData {
    if (json == null) {
        return json;
    }
    return {
        
        'method': json['method'] == null ? undefined : UiDataSourceHttpDataMethodFromJSON(json['method']),
        'baseUrl': json['baseUrl'],
        'queryString': json['queryString'] == null ? undefined : json['queryString'],
        'authHeaderName': json['authHeaderName'] == null ? undefined : json['authHeaderName'],
        'authHeaderValue': json['authHeaderValue'] == null ? undefined : SecretValueFromJSON(json['authHeaderValue']),
        'headers': json['headers'] == null ? undefined : json['headers'],
        'enableMethodParameterization': json['enableMethodParameterization'] == null ? undefined : json['enableMethodParameterization'],
        'enablePathParameterization': json['enablePathParameterization'] == null ? undefined : json['enablePathParameterization'],
        'enableQueryParameterization': json['enableQueryParameterization'] == null ? undefined : json['enableQueryParameterization'],
        'enableBodyParameterization': json['enableBodyParameterization'] == null ? undefined : json['enableBodyParameterization'],
    };
}

export function UiDataSourceHttpDataToJSON(json: any): UiDataSourceHttpData {
    return UiDataSourceHttpDataToJSONTyped(json, false);
}

export function UiDataSourceHttpDataToJSONTyped(value?: UiDataSourceHttpData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'method': UiDataSourceHttpDataMethodToJSON(value['method']),
        'baseUrl': value['baseUrl'],
        'queryString': value['queryString'],
        'authHeaderName': value['authHeaderName'],
        'authHeaderValue': SecretValueToJSON(value['authHeaderValue']),
        'headers': value['headers'],
        'enableMethodParameterization': value['enableMethodParameterization'],
        'enablePathParameterization': value['enablePathParameterization'],
        'enableQueryParameterization': value['enableQueryParameterization'],
        'enableBodyParameterization': value['enableBodyParameterization'],
    };
}

