/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UiPolicy } from './UiPolicy';
import {
    UiPolicyFromJSON,
    UiPolicyFromJSONTyped,
    UiPolicyToJSON,
    UiPolicyToJSONTyped,
} from './UiPolicy';
import type { UiAsset } from './UiAsset';
import {
    UiAssetFromJSON,
    UiAssetFromJSONTyped,
    UiAssetToJSON,
    UiAssetToJSONTyped,
} from './UiAsset';
import type { ContractAgreementTerminationInfo } from './ContractAgreementTerminationInfo';
import {
    ContractAgreementTerminationInfoFromJSON,
    ContractAgreementTerminationInfoFromJSONTyped,
    ContractAgreementTerminationInfoToJSON,
    ContractAgreementTerminationInfoToJSONTyped,
} from './ContractAgreementTerminationInfo';
import type { ContractAgreementTransferProcess } from './ContractAgreementTransferProcess';
import {
    ContractAgreementTransferProcessFromJSON,
    ContractAgreementTransferProcessFromJSONTyped,
    ContractAgreementTransferProcessToJSON,
    ContractAgreementTransferProcessToJSONTyped,
} from './ContractAgreementTransferProcess';
import type { ContractAgreementDirection } from './ContractAgreementDirection';
import {
    ContractAgreementDirectionFromJSON,
    ContractAgreementDirectionFromJSONTyped,
    ContractAgreementDirectionToJSON,
    ContractAgreementDirectionToJSONTyped,
} from './ContractAgreementDirection';
import type { ContractTerminationStatus } from './ContractTerminationStatus';
import {
    ContractTerminationStatusFromJSON,
    ContractTerminationStatusFromJSONTyped,
    ContractTerminationStatusToJSON,
    ContractTerminationStatusToJSONTyped,
} from './ContractTerminationStatus';

/**
 * Contract Agreement for Contract Agreement Page
 * @export
 * @interface ContractAgreementCard
 */
export interface ContractAgreementCard {
    /**
     * Contract Agreement ID
     * @type {string}
     * @memberof ContractAgreementCard
     */
    contractAgreementId: string;
    /**
     * Contract Negotiation ID
     * @type {string}
     * @memberof ContractAgreementCard
     */
    contractNegotiationId: string;
    /**
     * Incoming vs Outgoing
     * @type {ContractAgreementDirection}
     * @memberof ContractAgreementCard
     */
    direction: ContractAgreementDirection;
    /**
     * Other Connector's Endpoint
     * @type {string}
     * @memberof ContractAgreementCard
     */
    counterPartyAddress: string;
    /**
     * Other Connector's ID
     * @type {string}
     * @memberof ContractAgreementCard
     */
    counterPartyId: string;
    /**
     * Contract Agreements Signing Date
     * @type {Date}
     * @memberof ContractAgreementCard
     */
    contractSigningDate: Date;
    /**
     * Asset details
     * @type {UiAsset}
     * @memberof ContractAgreementCard
     */
    asset: UiAsset;
    /**
     * Contract Policy
     * @type {UiPolicy}
     * @memberof ContractAgreementCard
     */
    contractPolicy: UiPolicy;
    /**
     * Contract Agreement's Transfer Processes
     * @type {Array<ContractAgreementTransferProcess>}
     * @memberof ContractAgreementCard
     */
    transferProcesses: Array<ContractAgreementTransferProcess>;
    /**
     * Contract Agreement's Termination Status
     * @type {ContractTerminationStatus}
     * @memberof ContractAgreementCard
     */
    terminationStatus: ContractTerminationStatus;
    /**
     * Contract Agreement's Metadata
     * @type {ContractAgreementTerminationInfo}
     * @memberof ContractAgreementCard
     */
    terminationInformation?: ContractAgreementTerminationInfo;
}



/**
 * Check if a given object implements the ContractAgreementCard interface.
 */
export function instanceOfContractAgreementCard(value: any): value is ContractAgreementCard {
    if (!('contractAgreementId' in value) || value['contractAgreementId'] === undefined) return false;
    if (!('contractNegotiationId' in value) || value['contractNegotiationId'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('counterPartyAddress' in value) || value['counterPartyAddress'] === undefined) return false;
    if (!('counterPartyId' in value) || value['counterPartyId'] === undefined) return false;
    if (!('contractSigningDate' in value) || value['contractSigningDate'] === undefined) return false;
    if (!('asset' in value) || value['asset'] === undefined) return false;
    if (!('contractPolicy' in value) || value['contractPolicy'] === undefined) return false;
    if (!('transferProcesses' in value) || value['transferProcesses'] === undefined) return false;
    if (!('terminationStatus' in value) || value['terminationStatus'] === undefined) return false;
    return true;
}

export function ContractAgreementCardFromJSON(json: any): ContractAgreementCard {
    return ContractAgreementCardFromJSONTyped(json, false);
}

export function ContractAgreementCardFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContractAgreementCard {
    if (json == null) {
        return json;
    }
    return {
        
        'contractAgreementId': json['contractAgreementId'],
        'contractNegotiationId': json['contractNegotiationId'],
        'direction': ContractAgreementDirectionFromJSON(json['direction']),
        'counterPartyAddress': json['counterPartyAddress'],
        'counterPartyId': json['counterPartyId'],
        'contractSigningDate': (new Date(json['contractSigningDate'])),
        'asset': UiAssetFromJSON(json['asset']),
        'contractPolicy': UiPolicyFromJSON(json['contractPolicy']),
        'transferProcesses': ((json['transferProcesses'] as Array<any>).map(ContractAgreementTransferProcessFromJSON)),
        'terminationStatus': ContractTerminationStatusFromJSON(json['terminationStatus']),
        'terminationInformation': json['terminationInformation'] == null ? undefined : ContractAgreementTerminationInfoFromJSON(json['terminationInformation']),
    };
}

export function ContractAgreementCardToJSON(json: any): ContractAgreementCard {
    return ContractAgreementCardToJSONTyped(json, false);
}

export function ContractAgreementCardToJSONTyped(value?: ContractAgreementCard | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contractAgreementId': value['contractAgreementId'],
        'contractNegotiationId': value['contractNegotiationId'],
        'direction': ContractAgreementDirectionToJSON(value['direction']),
        'counterPartyAddress': value['counterPartyAddress'],
        'counterPartyId': value['counterPartyId'],
        'contractSigningDate': ((value['contractSigningDate']).toISOString()),
        'asset': UiAssetToJSON(value['asset']),
        'contractPolicy': UiPolicyToJSON(value['contractPolicy']),
        'transferProcesses': ((value['transferProcesses'] as Array<any>).map(ContractAgreementTransferProcessToJSON)),
        'terminationStatus': ContractTerminationStatusToJSON(value['terminationStatus']),
        'terminationInformation': ContractAgreementTerminationInfoToJSON(value['terminationInformation']),
    };
}

