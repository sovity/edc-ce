/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssetPage,
  BuildInfo,
  ContractAgreementCard,
  ContractAgreementPage,
  ContractAgreementPageQuery,
  ContractDefinitionPage,
  ContractDefinitionRequest,
  ContractNegotiationRequest,
  ContractTerminationRequest,
  DashboardPage,
  DataOfferCreateRequest,
  IdAvailabilityResponse,
  IdResponseDto,
  InitiateCustomTransferRequest,
  InitiateTransferRequest,
  PolicyDefinitionCreateDto,
  PolicyDefinitionCreateRequest,
  PolicyDefinitionPage,
  TransferHistoryPage,
  UiAsset,
  UiAssetCreateRequest,
  UiAssetEditRequest,
  UiConfig,
  UiContractNegotiation,
  UiDataOffer,
} from '../models/index';
import {
    AssetPageFromJSON,
    AssetPageToJSON,
    BuildInfoFromJSON,
    BuildInfoToJSON,
    ContractAgreementCardFromJSON,
    ContractAgreementCardToJSON,
    ContractAgreementPageFromJSON,
    ContractAgreementPageToJSON,
    ContractAgreementPageQueryFromJSON,
    ContractAgreementPageQueryToJSON,
    ContractDefinitionPageFromJSON,
    ContractDefinitionPageToJSON,
    ContractDefinitionRequestFromJSON,
    ContractDefinitionRequestToJSON,
    ContractNegotiationRequestFromJSON,
    ContractNegotiationRequestToJSON,
    ContractTerminationRequestFromJSON,
    ContractTerminationRequestToJSON,
    DashboardPageFromJSON,
    DashboardPageToJSON,
    DataOfferCreateRequestFromJSON,
    DataOfferCreateRequestToJSON,
    IdAvailabilityResponseFromJSON,
    IdAvailabilityResponseToJSON,
    IdResponseDtoFromJSON,
    IdResponseDtoToJSON,
    InitiateCustomTransferRequestFromJSON,
    InitiateCustomTransferRequestToJSON,
    InitiateTransferRequestFromJSON,
    InitiateTransferRequestToJSON,
    PolicyDefinitionCreateDtoFromJSON,
    PolicyDefinitionCreateDtoToJSON,
    PolicyDefinitionCreateRequestFromJSON,
    PolicyDefinitionCreateRequestToJSON,
    PolicyDefinitionPageFromJSON,
    PolicyDefinitionPageToJSON,
    TransferHistoryPageFromJSON,
    TransferHistoryPageToJSON,
    UiAssetFromJSON,
    UiAssetToJSON,
    UiAssetCreateRequestFromJSON,
    UiAssetCreateRequestToJSON,
    UiAssetEditRequestFromJSON,
    UiAssetEditRequestToJSON,
    UiConfigFromJSON,
    UiConfigToJSON,
    UiContractNegotiationFromJSON,
    UiContractNegotiationToJSON,
    UiDataOfferFromJSON,
    UiDataOfferToJSON,
} from '../models/index';

export interface CreateAssetRequest {
    uiAssetCreateRequest?: UiAssetCreateRequest;
}

export interface CreateContractDefinitionRequest {
    contractDefinitionRequest?: ContractDefinitionRequest;
}

export interface CreateDataOfferRequest {
    dataOfferCreateRequest?: DataOfferCreateRequest;
}

export interface CreatePolicyDefinitionRequest {
    policyDefinitionCreateRequest?: PolicyDefinitionCreateRequest;
}

export interface CreatePolicyDefinitionV2Request {
    policyDefinitionCreateDto?: PolicyDefinitionCreateDto;
}

export interface DeleteAssetRequest {
    assetId: string;
}

export interface DeleteContractDefinitionRequest {
    contractDefinitionId: string;
}

export interface DeletePolicyDefinitionRequest {
    policyId: string;
}

export interface EditAssetRequest {
    assetId: string;
    uiAssetEditRequest?: UiAssetEditRequest;
}

export interface GetCatalogPageDataOffersRequest {
    participantId?: string;
    connectorEndpoint?: string;
}

export interface GetContractAgreementCardRequest {
    contractAgreementId: string;
}

export interface GetContractAgreementPageRequest {
    contractAgreementPageQuery?: ContractAgreementPageQuery;
}

export interface GetContractNegotiationRequest {
    contractNegotiationId: string;
}

export interface GetTransferProcessAssetRequest {
    transferProcessId: string;
}

export interface InitiateContractNegotiationRequest {
    contractNegotiationRequest?: ContractNegotiationRequest;
}

export interface InitiateCustomTransferOperationRequest {
    initiateCustomTransferRequest?: InitiateCustomTransferRequest;
}

export interface InitiateTransferOperationRequest {
    initiateTransferRequest?: InitiateTransferRequest;
}

export interface IsAssetIdAvailableRequest {
    assetId: string;
}

export interface IsContractDefinitionIdAvailableRequest {
    contractDefinitionId: string;
}

export interface IsPolicyIdAvailableRequest {
    policyId: string;
}

export interface TerminateContractAgreementRequest {
    contractAgreementId: string;
    contractTerminationRequest?: ContractTerminationRequest;
}

/**
 * 
 */
export class UIApi extends runtime.BaseAPI {

    /**
     * Get the build version info
     */
    async buildInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/build-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildInfoFromJSON(jsonValue));
    }

    /**
     * Get the build version info
     */
    async buildInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildInfo> {
        const response = await this.buildInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new Asset
     */
    async createAssetRaw(requestParameters: CreateAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/asset-page/assets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UiAssetCreateRequestToJSON(requestParameters['uiAssetCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new Asset
     */
    async createAsset(requestParameters: CreateAssetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.createAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Contract Definition
     */
    async createContractDefinitionRaw(requestParameters: CreateContractDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-definition-page/contract-definitions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContractDefinitionRequestToJSON(requestParameters['contractDefinitionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new Contract Definition
     */
    async createContractDefinition(requestParameters: CreateContractDefinitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.createContractDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new asset, contract definition and optional policies. Uses the same id for the asset, the contract policy, the access policy and the contract definition
     */
    async createDataOfferRaw(requestParameters: CreateDataOfferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/create-data-offer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataOfferCreateRequestToJSON(requestParameters['dataOfferCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new asset, contract definition and optional policies. Uses the same id for the asset, the contract policy, the access policy and the contract definition
     */
    async createDataOffer(requestParameters: CreateDataOfferRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.createDataOfferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * [Deprecated] Create a new Policy Definition from a list of constraints. Use createPolicyDefinitionV2 instead.
     * @deprecated
     */
    async createPolicyDefinitionRaw(requestParameters: CreatePolicyDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/policy-page/policy-definitions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyDefinitionCreateRequestToJSON(requestParameters['policyDefinitionCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * [Deprecated] Create a new Policy Definition from a list of constraints. Use createPolicyDefinitionV2 instead.
     * @deprecated
     */
    async createPolicyDefinition(requestParameters: CreatePolicyDefinitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.createPolicyDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Policy Definition
     */
    async createPolicyDefinitionV2Raw(requestParameters: CreatePolicyDefinitionV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/v2/pages/policy-page/policy-definitions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyDefinitionCreateDtoToJSON(requestParameters['policyDefinitionCreateDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new Policy Definition
     */
    async createPolicyDefinitionV2(requestParameters: CreatePolicyDefinitionV2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.createPolicyDefinitionV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an Asset
     */
    async deleteAssetRaw(requestParameters: DeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling deleteAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/asset-page/assets/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Delete an Asset
     */
    async deleteAsset(requestParameters: DeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.deleteAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Contract Definition
     */
    async deleteContractDefinitionRaw(requestParameters: DeleteContractDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['contractDefinitionId'] == null) {
            throw new runtime.RequiredError(
                'contractDefinitionId',
                'Required parameter "contractDefinitionId" was null or undefined when calling deleteContractDefinition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-definition-page/contract-definitions/{contractDefinitionId}`.replace(`{${"contractDefinitionId"}}`, encodeURIComponent(String(requestParameters['contractDefinitionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Delete a Contract Definition
     */
    async deleteContractDefinition(requestParameters: DeleteContractDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.deleteContractDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Policy Definition
     */
    async deletePolicyDefinitionRaw(requestParameters: DeletePolicyDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['policyId'] == null) {
            throw new runtime.RequiredError(
                'policyId',
                'Required parameter "policyId" was null or undefined when calling deletePolicyDefinition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/policy-page/policy-definitions/{policyId}`.replace(`{${"policyId"}}`, encodeURIComponent(String(requestParameters['policyId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Delete a Policy Definition
     */
    async deletePolicyDefinition(requestParameters: DeletePolicyDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.deletePolicyDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an Asset\'s metadata and optionally also the data source.
     */
    async editAssetRaw(requestParameters: EditAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling editAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/asset-page/assets/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UiAssetEditRequestToJSON(requestParameters['uiAssetEditRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Updates an Asset\'s metadata and optionally also the data source.
     */
    async editAsset(requestParameters: EditAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.editAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for Asset Page
     */
    async getAssetPageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetPage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/asset-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetPageFromJSON(jsonValue));
    }

    /**
     * Collect all data for Asset Page
     */
    async getAssetPage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetPage> {
        const response = await this.getAssetPageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetch a connector\'s data offers
     */
    async getCatalogPageDataOffersRaw(requestParameters: GetCatalogPageDataOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UiDataOffer>>> {
        const queryParameters: any = {};

        if (requestParameters['participantId'] != null) {
            queryParameters['participantId'] = requestParameters['participantId'];
        }

        if (requestParameters['connectorEndpoint'] != null) {
            queryParameters['connectorEndpoint'] = requestParameters['connectorEndpoint'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/catalog-page/data-offers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UiDataOfferFromJSON));
    }

    /**
     * Fetch a connector\'s data offers
     */
    async getCatalogPageDataOffers(requestParameters: GetCatalogPageDataOffersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UiDataOffer>> {
        const response = await this.getCatalogPageDataOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single contract agreement card by its identifier
     */
    async getContractAgreementCardRaw(requestParameters: GetContractAgreementCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContractAgreementCard>> {
        if (requestParameters['contractAgreementId'] == null) {
            throw new runtime.RequiredError(
                'contractAgreementId',
                'Required parameter "contractAgreementId" was null or undefined when calling getContractAgreementCard().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-agreement-page/{contractAgreementId}`.replace(`{${"contractAgreementId"}}`, encodeURIComponent(String(requestParameters['contractAgreementId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContractAgreementCardFromJSON(jsonValue));
    }

    /**
     * Get a single contract agreement card by its identifier
     */
    async getContractAgreementCard(requestParameters: GetContractAgreementCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContractAgreementCard> {
        const response = await this.getContractAgreementCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collect filtered data for the Contract Agreement Page
     */
    async getContractAgreementPageRaw(requestParameters: GetContractAgreementPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContractAgreementPage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-agreement-page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContractAgreementPageQueryToJSON(requestParameters['contractAgreementPageQuery']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContractAgreementPageFromJSON(jsonValue));
    }

    /**
     * Collect filtered data for the Contract Agreement Page
     */
    async getContractAgreementPage(requestParameters: GetContractAgreementPageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContractAgreementPage> {
        const response = await this.getContractAgreementPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for Contract Definition Page
     */
    async getContractDefinitionPageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContractDefinitionPage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-definition-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContractDefinitionPageFromJSON(jsonValue));
    }

    /**
     * Collect all data for Contract Definition Page
     */
    async getContractDefinitionPage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContractDefinitionPage> {
        const response = await this.getContractDefinitionPageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Contract Negotiation Information
     */
    async getContractNegotiationRaw(requestParameters: GetContractNegotiationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiContractNegotiation>> {
        if (requestParameters['contractNegotiationId'] == null) {
            throw new runtime.RequiredError(
                'contractNegotiationId',
                'Required parameter "contractNegotiationId" was null or undefined when calling getContractNegotiation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/catalog-page/contract-negotiations/{contractNegotiationId}`.replace(`{${"contractNegotiationId"}}`, encodeURIComponent(String(requestParameters['contractNegotiationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiContractNegotiationFromJSON(jsonValue));
    }

    /**
     * Get Contract Negotiation Information
     */
    async getContractNegotiation(requestParameters: GetContractNegotiationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiContractNegotiation> {
        const response = await this.getContractNegotiationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for the Dashboard Page
     */
    async getDashboardPageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardPage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/dashboard-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardPageFromJSON(jsonValue));
    }

    /**
     * Collect all data for the Dashboard Page
     */
    async getDashboardPage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardPage> {
        const response = await this.getDashboardPageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for Policy Definition Page
     */
    async getPolicyDefinitionPageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PolicyDefinitionPage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/policy-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicyDefinitionPageFromJSON(jsonValue));
    }

    /**
     * Collect all data for Policy Definition Page
     */
    async getPolicyDefinitionPage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PolicyDefinitionPage> {
        const response = await this.getPolicyDefinitionPageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Collect all data for the Transfer History Page
     */
    async getTransferHistoryPageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransferHistoryPage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/transfer-history-page`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferHistoryPageFromJSON(jsonValue));
    }

    /**
     * Collect all data for the Transfer History Page
     */
    async getTransferHistoryPage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransferHistoryPage> {
        const response = await this.getTransferHistoryPageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Queries a transfer process\' asset
     */
    async getTransferProcessAssetRaw(requestParameters: GetTransferProcessAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiAsset>> {
        if (requestParameters['transferProcessId'] == null) {
            throw new runtime.RequiredError(
                'transferProcessId',
                'Required parameter "transferProcessId" was null or undefined when calling getTransferProcessAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/transfer-history-page/transfer-processes/{transferProcessId}/asset`.replace(`{${"transferProcessId"}}`, encodeURIComponent(String(requestParameters['transferProcessId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiAssetFromJSON(jsonValue));
    }

    /**
     * Queries a transfer process\' asset
     */
    async getTransferProcessAsset(requestParameters: GetTransferProcessAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiAsset> {
        const response = await this.getTransferProcessAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiate a new Contract Negotiation
     */
    async initiateContractNegotiationRaw(requestParameters: InitiateContractNegotiationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiContractNegotiation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/catalog-page/contract-negotiations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContractNegotiationRequestToJSON(requestParameters['contractNegotiationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiContractNegotiationFromJSON(jsonValue));
    }

    /**
     * Initiate a new Contract Negotiation
     */
    async initiateContractNegotiation(requestParameters: InitiateContractNegotiationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiContractNegotiation> {
        const response = await this.initiateContractNegotiationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiate a Transfer Process via a custom Transfer Process JSON-LD. Fields such as connectorId, assetId, providerConnectorId, providerConnectorAddress will be set automatically.
     */
    async initiateCustomTransferRaw(requestParameters: InitiateCustomTransferOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-agreement-page/transfers/custom`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InitiateCustomTransferRequestToJSON(requestParameters['initiateCustomTransferRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Initiate a Transfer Process via a custom Transfer Process JSON-LD. Fields such as connectorId, assetId, providerConnectorId, providerConnectorAddress will be set automatically.
     */
    async initiateCustomTransfer(requestParameters: InitiateCustomTransferOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.initiateCustomTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiate a Transfer Process
     */
    async initiateTransferRaw(requestParameters: InitiateTransferOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/contract-agreement-page/transfers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InitiateTransferRequestToJSON(requestParameters['initiateTransferRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Initiate a Transfer Process
     */
    async initiateTransfer(requestParameters: InitiateTransferOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.initiateTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validates if the provided assetId is already taken
     */
    async isAssetIdAvailableRaw(requestParameters: IsAssetIdAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdAvailabilityResponse>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling isAssetIdAvailable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/data-offer-page/validate-asset-id/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters['assetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     * Validates if the provided assetId is already taken
     */
    async isAssetIdAvailable(requestParameters: IsAssetIdAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdAvailabilityResponse> {
        const response = await this.isAssetIdAvailableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validates if the provided contractDefinitionId is already taken
     */
    async isContractDefinitionIdAvailableRaw(requestParameters: IsContractDefinitionIdAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdAvailabilityResponse>> {
        if (requestParameters['contractDefinitionId'] == null) {
            throw new runtime.RequiredError(
                'contractDefinitionId',
                'Required parameter "contractDefinitionId" was null or undefined when calling isContractDefinitionIdAvailable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/data-offer-page/validate-contract-definition-id/{contractDefinitionId}`.replace(`{${"contractDefinitionId"}}`, encodeURIComponent(String(requestParameters['contractDefinitionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     * Validates if the provided contractDefinitionId is already taken
     */
    async isContractDefinitionIdAvailable(requestParameters: IsContractDefinitionIdAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdAvailabilityResponse> {
        const response = await this.isContractDefinitionIdAvailableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validates if the provided policyId is already taken
     */
    async isPolicyIdAvailableRaw(requestParameters: IsPolicyIdAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdAvailabilityResponse>> {
        if (requestParameters['policyId'] == null) {
            throw new runtime.RequiredError(
                'policyId',
                'Required parameter "policyId" was null or undefined when calling isPolicyIdAvailable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/pages/data-offer-page/validate-policy-id/{policyId}`.replace(`{${"policyId"}}`, encodeURIComponent(String(requestParameters['policyId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     * Validates if the provided policyId is already taken
     */
    async isPolicyIdAvailable(requestParameters: IsPolicyIdAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdAvailabilityResponse> {
        const response = await this.isPolicyIdAvailableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Terminates a contract agreement designated by its contract agreement id.
     */
    async terminateContractAgreementRaw(requestParameters: TerminateContractAgreementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdResponseDto>> {
        if (requestParameters['contractAgreementId'] == null) {
            throw new runtime.RequiredError(
                'contractAgreementId',
                'Required parameter "contractAgreementId" was null or undefined when calling terminateContractAgreement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wrapper/ui/pages/content-agreement-page/{contractAgreementId}/terminate`.replace(`{${"contractAgreementId"}}`, encodeURIComponent(String(requestParameters['contractAgreementId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContractTerminationRequestToJSON(requestParameters['contractTerminationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdResponseDtoFromJSON(jsonValue));
    }

    /**
     * Terminates a contract agreement designated by its contract agreement id.
     */
    async terminateContractAgreement(requestParameters: TerminateContractAgreementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdResponseDto> {
        const response = await this.terminateContractAgreementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the UI configuration
     */
    async uiConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiConfig>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wrapper/ui/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiConfigFromJSON(jsonValue));
    }

    /**
     * Get the UI configuration
     */
    async uiConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiConfig> {
        const response = await this.uiConfigRaw(initOverrides);
        return await response.value();
    }

}
