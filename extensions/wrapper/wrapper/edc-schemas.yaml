schemas:
  AndConstraint:
    type: object
    properties:
      constraints:
        type: array
        items:
          $ref: '#/components/schemas/Constraint'
  AtomicConstraint:
    type: object
    allOf:
      - $ref: '#/components/schemas/Constraint'
      - type: object
        properties:
          leftExpression:
            $ref: '#/components/schemas/Expression'
          rightExpression:
            $ref: '#/components/schemas/Expression'
          operator:
            type: string
            enum:
              - EQ
              - NEQ
              - GT
              - GEQ
              - LT
              - LEQ
              - IN
  OrConstraint:
    type: object
    properties:
      constraints:
        type: array
        items:
          $ref: '#/components/schemas/Constraint'
  XoneConstraint:
    type: object
    properties:
      constraints:
        type: array
        items:
          $ref: '#/components/schemas/Constraint'
  Constraint:
    required:
      - edctype
    type: object
    properties:
      edctype:
        type: string
    description: constraint test
    discriminator:
      propertyName: edctype
    oneOf:
      - $ref: '#/components/schemas/AtomicConstraint'
      - $ref: '#/components/schemas/AndConstraint'
      - $ref: '#/components/schemas/OrConstraint'
      - $ref: '#/components/schemas/XoneConstraint'
  Expression:
    required:
      - edctype
    type: object
    properties:
      edctype:
        type: string
    description: expression test
    discriminator:
      propertyName: edctype
    oneOf:
      - $ref: '#/components/schemas/LiteralExpression'
  LiteralExpression:
    type: object
    properties:
      value:
        type: object
