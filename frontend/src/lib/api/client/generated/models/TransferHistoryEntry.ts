/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransferProcessState } from './TransferProcessState';
import {
    TransferProcessStateFromJSON,
    TransferProcessStateFromJSONTyped,
    TransferProcessStateToJSON,
    TransferProcessStateToJSONTyped,
} from './TransferProcessState';
import type { ContractAgreementDirection } from './ContractAgreementDirection';
import {
    ContractAgreementDirectionFromJSON,
    ContractAgreementDirectionFromJSONTyped,
    ContractAgreementDirectionToJSON,
    ContractAgreementDirectionToJSONTyped,
} from './ContractAgreementDirection';

/**
 * Transfer History Entry for Transfer History Page
 * @export
 * @interface TransferHistoryEntry
 */
export interface TransferHistoryEntry {
    /**
     * Transfer Process ID
     * @type {string}
     * @memberof TransferHistoryEntry
     */
    transferProcessId: string;
    /**
     * Created Date
     * @type {Date}
     * @memberof TransferHistoryEntry
     */
    createdDate: Date;
    /**
     * Last Change Date
     * @type {Date}
     * @memberof TransferHistoryEntry
     */
    lastUpdatedDate: Date;
    /**
     * Transfer History State
     * @type {TransferProcessState}
     * @memberof TransferHistoryEntry
     */
    state: TransferProcessState;
    /**
     * Contract Agreement ID
     * @type {string}
     * @memberof TransferHistoryEntry
     */
    contractAgreementId: string;
    /**
     * Incoming vs Outgoing
     * @type {ContractAgreementDirection}
     * @memberof TransferHistoryEntry
     */
    direction: ContractAgreementDirection;
    /**
     * Other Connector's Endpoint
     * @type {string}
     * @memberof TransferHistoryEntry
     */
    counterPartyConnectorEndpoint: string;
    /**
     * Other Connector's Participant ID
     * @type {string}
     * @memberof TransferHistoryEntry
     */
    counterPartyParticipantId: string;
    /**
     * Asset Name
     * @type {string}
     * @memberof TransferHistoryEntry
     */
    assetName: string;
    /**
     * Asset ID
     * @type {string}
     * @memberof TransferHistoryEntry
     */
    assetId: string;
    /**
     * Error Message
     * @type {string}
     * @memberof TransferHistoryEntry
     */
    errorMessage?: string;
}



/**
 * Check if a given object implements the TransferHistoryEntry interface.
 */
export function instanceOfTransferHistoryEntry(value: any): value is TransferHistoryEntry {
    if (!('transferProcessId' in value) || value['transferProcessId'] === undefined) return false;
    if (!('createdDate' in value) || value['createdDate'] === undefined) return false;
    if (!('lastUpdatedDate' in value) || value['lastUpdatedDate'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('contractAgreementId' in value) || value['contractAgreementId'] === undefined) return false;
    if (!('direction' in value) || value['direction'] === undefined) return false;
    if (!('counterPartyConnectorEndpoint' in value) || value['counterPartyConnectorEndpoint'] === undefined) return false;
    if (!('counterPartyParticipantId' in value) || value['counterPartyParticipantId'] === undefined) return false;
    if (!('assetName' in value) || value['assetName'] === undefined) return false;
    if (!('assetId' in value) || value['assetId'] === undefined) return false;
    return true;
}

export function TransferHistoryEntryFromJSON(json: any): TransferHistoryEntry {
    return TransferHistoryEntryFromJSONTyped(json, false);
}

export function TransferHistoryEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferHistoryEntry {
    if (json == null) {
        return json;
    }
    return {
        
        'transferProcessId': json['transferProcessId'],
        'createdDate': (new Date(json['createdDate'])),
        'lastUpdatedDate': (new Date(json['lastUpdatedDate'])),
        'state': TransferProcessStateFromJSON(json['state']),
        'contractAgreementId': json['contractAgreementId'],
        'direction': ContractAgreementDirectionFromJSON(json['direction']),
        'counterPartyConnectorEndpoint': json['counterPartyConnectorEndpoint'],
        'counterPartyParticipantId': json['counterPartyParticipantId'],
        'assetName': json['assetName'],
        'assetId': json['assetId'],
        'errorMessage': json['errorMessage'] == null ? undefined : json['errorMessage'],
    };
}

export function TransferHistoryEntryToJSON(json: any): TransferHistoryEntry {
    return TransferHistoryEntryToJSONTyped(json, false);
}

export function TransferHistoryEntryToJSONTyped(value?: TransferHistoryEntry | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'transferProcessId': value['transferProcessId'],
        'createdDate': ((value['createdDate']).toISOString()),
        'lastUpdatedDate': ((value['lastUpdatedDate']).toISOString()),
        'state': TransferProcessStateToJSON(value['state']),
        'contractAgreementId': value['contractAgreementId'],
        'direction': ContractAgreementDirectionToJSON(value['direction']),
        'counterPartyConnectorEndpoint': value['counterPartyConnectorEndpoint'],
        'counterPartyParticipantId': value['counterPartyParticipantId'],
        'assetName': value['assetName'],
        'assetId': value['assetId'],
        'errorMessage': value['errorMessage'],
    };
}

