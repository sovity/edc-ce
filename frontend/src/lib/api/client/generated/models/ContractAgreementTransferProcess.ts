/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransferProcessState } from './TransferProcessState';
import {
    TransferProcessStateFromJSON,
    TransferProcessStateFromJSONTyped,
    TransferProcessStateToJSON,
    TransferProcessStateToJSONTyped,
} from './TransferProcessState';

/**
 * A Contract Agreement's Transfer Process
 * @export
 * @interface ContractAgreementTransferProcess
 */
export interface ContractAgreementTransferProcess {
    /**
     * Transfer Process ID
     * @type {string}
     * @memberof ContractAgreementTransferProcess
     */
    transferProcessId: string;
    /**
     * Last Change Date
     * @type {Date}
     * @memberof ContractAgreementTransferProcess
     */
    lastUpdatedDate: Date;
    /**
     * Current State
     * @type {TransferProcessState}
     * @memberof ContractAgreementTransferProcess
     */
    state: TransferProcessState;
    /**
     * Error Message
     * @type {string}
     * @memberof ContractAgreementTransferProcess
     */
    errorMessage?: string;
}

/**
 * Check if a given object implements the ContractAgreementTransferProcess interface.
 */
export function instanceOfContractAgreementTransferProcess(value: any): value is ContractAgreementTransferProcess {
    if (!('transferProcessId' in value) || value['transferProcessId'] === undefined) return false;
    if (!('lastUpdatedDate' in value) || value['lastUpdatedDate'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    return true;
}

export function ContractAgreementTransferProcessFromJSON(json: any): ContractAgreementTransferProcess {
    return ContractAgreementTransferProcessFromJSONTyped(json, false);
}

export function ContractAgreementTransferProcessFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContractAgreementTransferProcess {
    if (json == null) {
        return json;
    }
    return {
        
        'transferProcessId': json['transferProcessId'],
        'lastUpdatedDate': (new Date(json['lastUpdatedDate'])),
        'state': TransferProcessStateFromJSON(json['state']),
        'errorMessage': json['errorMessage'] == null ? undefined : json['errorMessage'],
    };
}

export function ContractAgreementTransferProcessToJSON(json: any): ContractAgreementTransferProcess {
    return ContractAgreementTransferProcessToJSONTyped(json, false);
}

export function ContractAgreementTransferProcessToJSONTyped(value?: ContractAgreementTransferProcess | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'transferProcessId': value['transferProcessId'],
        'lastUpdatedDate': ((value['lastUpdatedDate']).toISOString()),
        'state': TransferProcessStateToJSON(value['state']),
        'errorMessage': value['errorMessage'],
    };
}

