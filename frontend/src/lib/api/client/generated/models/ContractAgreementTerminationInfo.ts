/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContractTerminatedBy } from './ContractTerminatedBy';
import {
    ContractTerminatedByFromJSON,
    ContractTerminatedByFromJSONTyped,
    ContractTerminatedByToJSON,
    ContractTerminatedByToJSONTyped,
} from './ContractTerminatedBy';

/**
 * Contract's agreement metadata
 * @export
 * @interface ContractAgreementTerminationInfo
 */
export interface ContractAgreementTerminationInfo {
    /**
     * Termination's date and time
     * @type {Date}
     * @memberof ContractAgreementTerminationInfo
     */
    terminatedAt: Date;
    /**
     * The termination's nature e.g. User Termination
     * @type {string}
     * @memberof ContractAgreementTerminationInfo
     */
    reason: string;
    /**
     * Detailed message from the terminating party about why the contract was terminated.
     * @type {string}
     * @memberof ContractAgreementTerminationInfo
     */
    detail: string;
    /**
     * Indicates whether the termination comes from this EDC or the counterparty EDC.
     * @type {ContractTerminatedBy}
     * @memberof ContractAgreementTerminationInfo
     */
    terminatedBy: ContractTerminatedBy;
}



/**
 * Check if a given object implements the ContractAgreementTerminationInfo interface.
 */
export function instanceOfContractAgreementTerminationInfo(value: any): value is ContractAgreementTerminationInfo {
    if (!('terminatedAt' in value) || value['terminatedAt'] === undefined) return false;
    if (!('reason' in value) || value['reason'] === undefined) return false;
    if (!('detail' in value) || value['detail'] === undefined) return false;
    if (!('terminatedBy' in value) || value['terminatedBy'] === undefined) return false;
    return true;
}

export function ContractAgreementTerminationInfoFromJSON(json: any): ContractAgreementTerminationInfo {
    return ContractAgreementTerminationInfoFromJSONTyped(json, false);
}

export function ContractAgreementTerminationInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContractAgreementTerminationInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'terminatedAt': (new Date(json['terminatedAt'])),
        'reason': json['reason'],
        'detail': json['detail'],
        'terminatedBy': ContractTerminatedByFromJSON(json['terminatedBy']),
    };
}

export function ContractAgreementTerminationInfoToJSON(json: any): ContractAgreementTerminationInfo {
    return ContractAgreementTerminationInfoToJSONTyped(json, false);
}

export function ContractAgreementTerminationInfoToJSONTyped(value?: ContractAgreementTerminationInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'terminatedAt': ((value['terminatedAt']).toISOString()),
        'reason': value['reason'],
        'detail': value['detail'],
        'terminatedBy': ContractTerminatedByToJSON(value['terminatedBy']),
    };
}

