/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContractNegotiationSimplifiedState } from './ContractNegotiationSimplifiedState';
import {
    ContractNegotiationSimplifiedStateFromJSON,
    ContractNegotiationSimplifiedStateFromJSONTyped,
    ContractNegotiationSimplifiedStateToJSON,
    ContractNegotiationSimplifiedStateToJSONTyped,
} from './ContractNegotiationSimplifiedState';

/**
 * Contract Negotiation State interpreted
 * @export
 * @interface ContractNegotiationState
 */
export interface ContractNegotiationState {
    /**
     * State name or 'CUSTOM'. State names only exist for original EDC Contract Negotiation States.
     * @type {string}
     * @memberof ContractNegotiationState
     */
    name: string;
    /**
     * State code
     * @type {number}
     * @memberof ContractNegotiationState
     */
    code: number;
    /**
     * Whether we are running, in an error state or done.
     * @type {ContractNegotiationSimplifiedState}
     * @memberof ContractNegotiationState
     */
    simplifiedState: ContractNegotiationSimplifiedState;
}



/**
 * Check if a given object implements the ContractNegotiationState interface.
 */
export function instanceOfContractNegotiationState(value: any): value is ContractNegotiationState {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('simplifiedState' in value) || value['simplifiedState'] === undefined) return false;
    return true;
}

export function ContractNegotiationStateFromJSON(json: any): ContractNegotiationState {
    return ContractNegotiationStateFromJSONTyped(json, false);
}

export function ContractNegotiationStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContractNegotiationState {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'code': json['code'],
        'simplifiedState': ContractNegotiationSimplifiedStateFromJSON(json['simplifiedState']),
    };
}

export function ContractNegotiationStateToJSON(json: any): ContractNegotiationState {
    return ContractNegotiationStateToJSONTyped(json, false);
}

export function ContractNegotiationStateToJSONTyped(value?: ContractNegotiationState | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'code': value['code'],
        'simplifiedState': ContractNegotiationSimplifiedStateToJSON(value['simplifiedState']),
    };
}

