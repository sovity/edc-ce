/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DataSourceType } from './DataSourceType';
import {
    DataSourceTypeFromJSON,
    DataSourceTypeFromJSONTyped,
    DataSourceTypeToJSON,
    DataSourceTypeToJSONTyped,
} from './DataSourceType';
import type { UiDataSourceHttpData } from './UiDataSourceHttpData';
import {
    UiDataSourceHttpDataFromJSON,
    UiDataSourceHttpDataFromJSONTyped,
    UiDataSourceHttpDataToJSON,
    UiDataSourceHttpDataToJSONTyped,
} from './UiDataSourceHttpData';
import type { UiDataSourceOnRequest } from './UiDataSourceOnRequest';
import {
    UiDataSourceOnRequestFromJSON,
    UiDataSourceOnRequestFromJSONTyped,
    UiDataSourceOnRequestToJSON,
    UiDataSourceOnRequestToJSONTyped,
} from './UiDataSourceOnRequest';

/**
 * Type-safe data source as supported by the sovity product landscape. Contains extension points for using custom data address properties.
 * @export
 * @interface UiDataSource
 */
export interface UiDataSource {
    /**
     * Data Address Type.
     * @type {DataSourceType}
     * @memberof UiDataSource
     */
    type: DataSourceType;
    /**
     * Only for type HTTP_DATA
     * @type {UiDataSourceHttpData}
     * @memberof UiDataSource
     */
    httpData?: UiDataSourceHttpData;
    /**
     * Only for type ON_REQUEST
     * @type {UiDataSourceOnRequest}
     * @memberof UiDataSource
     */
    onRequest?: UiDataSourceOnRequest;
    /**
     * For all types. Custom Data Address Properties.
     * @type {{ [key: string]: string; }}
     * @memberof UiDataSource
     */
    customProperties?: { [key: string]: string; };
}



/**
 * Check if a given object implements the UiDataSource interface.
 */
export function instanceOfUiDataSource(value: any): value is UiDataSource {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function UiDataSourceFromJSON(json: any): UiDataSource {
    return UiDataSourceFromJSONTyped(json, false);
}

export function UiDataSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiDataSource {
    if (json == null) {
        return json;
    }
    return {
        
        'type': DataSourceTypeFromJSON(json['type']),
        'httpData': json['httpData'] == null ? undefined : UiDataSourceHttpDataFromJSON(json['httpData']),
        'onRequest': json['onRequest'] == null ? undefined : UiDataSourceOnRequestFromJSON(json['onRequest']),
        'customProperties': json['customProperties'] == null ? undefined : json['customProperties'],
    };
}

export function UiDataSourceToJSON(json: any): UiDataSource {
    return UiDataSourceToJSONTyped(json, false);
}

export function UiDataSourceToJSONTyped(value?: UiDataSource | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': DataSourceTypeToJSON(value['type']),
        'httpData': UiDataSourceHttpDataToJSON(value['httpData']),
        'onRequest': UiDataSourceOnRequestToJSON(value['onRequest']),
        'customProperties': value['customProperties'],
    };
}

