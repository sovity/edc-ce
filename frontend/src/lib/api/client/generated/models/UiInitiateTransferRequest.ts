/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UiDataSinkHttpDataPush } from './UiDataSinkHttpDataPush';
import {
    UiDataSinkHttpDataPushFromJSON,
    UiDataSinkHttpDataPushFromJSONTyped,
    UiDataSinkHttpDataPushToJSON,
    UiDataSinkHttpDataPushToJSONTyped,
} from './UiDataSinkHttpDataPush';
import type { CallbackAddressDto } from './CallbackAddressDto';
import {
    CallbackAddressDtoFromJSON,
    CallbackAddressDtoFromJSONTyped,
    CallbackAddressDtoToJSON,
    CallbackAddressDtoToJSONTyped,
} from './CallbackAddressDto';
import type { UiInitiateTransferType } from './UiInitiateTransferType';
import {
    UiInitiateTransferTypeFromJSON,
    UiInitiateTransferTypeFromJSONTyped,
    UiInitiateTransferTypeToJSON,
    UiInitiateTransferTypeToJSONTyped,
} from './UiInitiateTransferType';

/**
 * Type-safe data sink as supported by the sovity product landscape. Contains extension points for using custom data address properties.
 * @export
 * @interface UiInitiateTransferRequest
 */
export interface UiInitiateTransferRequest {
    /**
     * Contract Agreement ID
     * @type {string}
     * @memberof UiInitiateTransferRequest
     */
    contractAgreementId: string;
    /**
     * Type of a transfer to initiate
     * @type {UiInitiateTransferType}
     * @memberof UiInitiateTransferRequest
     */
    type: UiInitiateTransferType;
    /**
     * Only for type HTTP_DATA_PUSH
     * @type {UiDataSinkHttpDataPush}
     * @memberof UiInitiateTransferRequest
     */
    httpDataPush?: UiDataSinkHttpDataPush;
    /**
     * List of endpoints to call upon given transfer events
     * @type {Array<CallbackAddressDto>}
     * @memberof UiInitiateTransferRequest
     */
    callbackAddresses?: Array<CallbackAddressDto>;
    /**
     * For all types. Custom Data Address Properties.
     * @type {{ [key: string]: string; }}
     * @memberof UiInitiateTransferRequest
     */
    customDataSinkProperties?: { [key: string]: string; };
    /**
     * For all types. Custom Transfer Process Properties.
     * @type {{ [key: string]: string; }}
     * @memberof UiInitiateTransferRequest
     */
    customTransferPrivateProperties?: { [key: string]: string; };
    /**
     * For all types. Override the Transfer Type.
     * @type {string}
     * @memberof UiInitiateTransferRequest
     */
    customTransferType?: string;
}



/**
 * Check if a given object implements the UiInitiateTransferRequest interface.
 */
export function instanceOfUiInitiateTransferRequest(value: any): value is UiInitiateTransferRequest {
    if (!('contractAgreementId' in value) || value['contractAgreementId'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function UiInitiateTransferRequestFromJSON(json: any): UiInitiateTransferRequest {
    return UiInitiateTransferRequestFromJSONTyped(json, false);
}

export function UiInitiateTransferRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiInitiateTransferRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'contractAgreementId': json['contractAgreementId'],
        'type': UiInitiateTransferTypeFromJSON(json['type']),
        'httpDataPush': json['httpDataPush'] == null ? undefined : UiDataSinkHttpDataPushFromJSON(json['httpDataPush']),
        'callbackAddresses': json['callbackAddresses'] == null ? undefined : ((json['callbackAddresses'] as Array<any>).map(CallbackAddressDtoFromJSON)),
        'customDataSinkProperties': json['customDataSinkProperties'] == null ? undefined : json['customDataSinkProperties'],
        'customTransferPrivateProperties': json['customTransferPrivateProperties'] == null ? undefined : json['customTransferPrivateProperties'],
        'customTransferType': json['customTransferType'] == null ? undefined : json['customTransferType'],
    };
}

export function UiInitiateTransferRequestToJSON(json: any): UiInitiateTransferRequest {
    return UiInitiateTransferRequestToJSONTyped(json, false);
}

export function UiInitiateTransferRequestToJSONTyped(value?: UiInitiateTransferRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contractAgreementId': value['contractAgreementId'],
        'type': UiInitiateTransferTypeToJSON(value['type']),
        'httpDataPush': UiDataSinkHttpDataPushToJSON(value['httpDataPush']),
        'callbackAddresses': value['callbackAddresses'] == null ? undefined : ((value['callbackAddresses'] as Array<any>).map(CallbackAddressDtoToJSON)),
        'customDataSinkProperties': value['customDataSinkProperties'],
        'customTransferPrivateProperties': value['customTransferPrivateProperties'],
        'customTransferType': value['customTransferType'],
    };
}

