/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransferProcessSimplifiedState } from './TransferProcessSimplifiedState';
import {
    TransferProcessSimplifiedStateFromJSON,
    TransferProcessSimplifiedStateFromJSONTyped,
    TransferProcessSimplifiedStateToJSON,
    TransferProcessSimplifiedStateToJSONTyped,
} from './TransferProcessSimplifiedState';

/**
 * Transfer Process State interpreted
 * @export
 * @interface TransferProcessState
 */
export interface TransferProcessState {
    /**
     * State name or 'CUSTOM'. State names only exist for original EDC Transfer Process States.
     * @type {string}
     * @memberof TransferProcessState
     */
    name: string;
    /**
     * State code
     * @type {number}
     * @memberof TransferProcessState
     */
    code: number;
    /**
     * Whether we are running, in an error state or done.
     * @type {TransferProcessSimplifiedState}
     * @memberof TransferProcessState
     */
    simplifiedState: TransferProcessSimplifiedState;
}



/**
 * Check if a given object implements the TransferProcessState interface.
 */
export function instanceOfTransferProcessState(value: any): value is TransferProcessState {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('simplifiedState' in value) || value['simplifiedState'] === undefined) return false;
    return true;
}

export function TransferProcessStateFromJSON(json: any): TransferProcessState {
    return TransferProcessStateFromJSONTyped(json, false);
}

export function TransferProcessStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransferProcessState {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'code': json['code'],
        'simplifiedState': TransferProcessSimplifiedStateFromJSON(json['simplifiedState']),
    };
}

export function TransferProcessStateToJSON(json: any): TransferProcessState {
    return TransferProcessStateToJSONTyped(json, false);
}

export function TransferProcessStateToJSONTyped(value?: TransferProcessState | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'code': value['code'],
        'simplifiedState': TransferProcessSimplifiedStateToJSON(value['simplifiedState']),
    };
}

