/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UiHttpAuthApiKey } from './UiHttpAuthApiKey';
import {
    UiHttpAuthApiKeyFromJSON,
    UiHttpAuthApiKeyFromJSONTyped,
    UiHttpAuthApiKeyToJSON,
    UiHttpAuthApiKeyToJSONTyped,
} from './UiHttpAuthApiKey';
import type { UiHttpAuthType } from './UiHttpAuthType';
import {
    UiHttpAuthTypeFromJSON,
    UiHttpAuthTypeFromJSONTyped,
    UiHttpAuthTypeToJSON,
    UiHttpAuthTypeToJSONTyped,
} from './UiHttpAuthType';
import type { UiHttpAuthBasic } from './UiHttpAuthBasic';
import {
    UiHttpAuthBasicFromJSON,
    UiHttpAuthBasicFromJSONTyped,
    UiHttpAuthBasicToJSON,
    UiHttpAuthBasicToJSONTyped,
} from './UiHttpAuthBasic';
import type { UiHttpAuthOauth2 } from './UiHttpAuthOauth2';
import {
    UiHttpAuthOauth2FromJSON,
    UiHttpAuthOauth2FromJSONTyped,
    UiHttpAuthOauth2ToJSON,
    UiHttpAuthOauth2ToJSONTyped,
} from './UiHttpAuthOauth2';

/**
 * Available authentication methods for http data sources. Use only one.
 * @export
 * @interface UiHttpAuth
 */
export interface UiHttpAuth {
    /**
     * The type of authentication.
     * @type {UiHttpAuthType}
     * @memberof UiHttpAuth
     */
    type: UiHttpAuthType;
    /**
     * Required when type=BASIC. To use basic authentication.
     * @type {UiHttpAuthBasic}
     * @memberof UiHttpAuth
     */
    basic?: UiHttpAuthBasic;
    /**
     * Required when type=API_KEY. To use api key authentication with a secret from the vault.
     * @type {UiHttpAuthApiKey}
     * @memberof UiHttpAuth
     */
    apiKey?: UiHttpAuthApiKey;
    /**
     * Required when type=OAUTH. To use oauth authentication.
     * @type {UiHttpAuthOauth2}
     * @memberof UiHttpAuth
     */
    oauth?: UiHttpAuthOauth2;
}



/**
 * Check if a given object implements the UiHttpAuth interface.
 */
export function instanceOfUiHttpAuth(value: any): value is UiHttpAuth {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function UiHttpAuthFromJSON(json: any): UiHttpAuth {
    return UiHttpAuthFromJSONTyped(json, false);
}

export function UiHttpAuthFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiHttpAuth {
    if (json == null) {
        return json;
    }
    return {
        
        'type': UiHttpAuthTypeFromJSON(json['type']),
        'basic': json['basic'] == null ? undefined : UiHttpAuthBasicFromJSON(json['basic']),
        'apiKey': json['apiKey'] == null ? undefined : UiHttpAuthApiKeyFromJSON(json['apiKey']),
        'oauth': json['oauth'] == null ? undefined : UiHttpAuthOauth2FromJSON(json['oauth']),
    };
}

export function UiHttpAuthToJSON(json: any): UiHttpAuth {
    return UiHttpAuthToJSONTyped(json, false);
}

export function UiHttpAuthToJSONTyped(value?: UiHttpAuth | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': UiHttpAuthTypeToJSON(value['type']),
        'basic': UiHttpAuthBasicToJSON(value['basic']),
        'apiKey': UiHttpAuthApiKeyToJSON(value['apiKey']),
        'oauth': UiHttpAuthOauth2ToJSON(value['oauth']),
    };
}

