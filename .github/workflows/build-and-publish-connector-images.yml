name: EDC Docker Images

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BASE: ${{ github.repository_owner }}
  TEST_BACKEND_IMAGE_NAME: test-backend
  TEST_BACKEND_IMAGE_TITLE: e2e test-backend
  TEST_BACKEND_IMAGE_DESCRIPTION: A test-backend, used for e2e testing

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        imageVariants: [
          {
            "imageName": "edc-dev",
            "title": "sovity Dev EDC Connector",
            "description": "Extended EDC Connector built by sovity. This dev version contains no persistence or auth and can be used to quickly start a locally running EDC + EDC UI.",
            "buildArgs": "-Pdmgmt-api-key"
          },
          {
            "imageName": "edc-ce",
            "title": "sovity Community Edition EDC Connector",
            "description": "EDC Connector built by sovity. Contains sovity's Community Edition EDC extensions and requires dataspace credentials to join an existing dataspace.",
            "buildArgs": "-Pfs-vault -Pdmgmt-api-key -Ppostgres-flyway -Poauth2"
          },
          {
            "imageName": "edc-ce-mds",
            "title": "MDS Community Edition EDC Connector",
            "description": "EDC Connector built by sovity and configured for compatibility with the Mobility Data Space (MDS). This EDC requires dataspace credentials, an IDS broker and an IDS Clearing House.",
            "buildArgs": "-Pfs-vault -Pdmgmt-api-key -Ppostgres-flyway -Poauth2 -Pmds"
          }
        ]
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Store last commit info and build date
        id: last-commit-information
        run: |
          echo "Saving local commit details."
          echo "LAST_COMMIT_INFO<<EOF" >> $GITHUB_ENV
          export LAST_COMMIT_INFO=$(git log -1)
          echo "$LAST_COMMIT_INFO" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "BUILD_DATE=$(date --utc +%FT%TZ)" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Connector Docker Image
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ matrix.imageVariants.imageName }}
          labels: |
            org.opencontainers.image.title=${{ matrix.imageVariants.title }}
            org.opencontainers.image.description=${{ matrix.imageVariants.description }}
          tags: |
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=release,enable=${{ startsWith(github.ref, 'refs/tags/') }}

      - name: Build and push EDC image
        uses: docker/build-push-action@v4
        with:
          file: launcher/connector/Dockerfile
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_ARGS=${{ matrix.imageVariants.buildArgs }}
            EDC_LAST_COMMIT_INFO_ARG="${{ env.LAST_COMMIT_INFO }}"
            EDC_BUILD_DATE_ARG="${{ env.BUILD_DATE }}"

      - name: Extract metadata (tags, labels) for Test Backend Docker Image
        id: test-backend-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ env.TEST_BACKEND_IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.TEST_BACKEND_IMAGE_TITLE }}
            org.opencontainers.image.description=${{ env.TEST_BACKEND_IMAGE_DESCRIPTION }}
          tags: |
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=release,enable=${{ startsWith(github.ref, 'refs/tags/') }}

      - name: Build and push test-backend image
        uses: docker/build-push-action@v4
        with:
          file: launcher/test-backend/Dockerfile
          context: .
          push: true
          tags: ${{ steps.test-backend-meta.outputs.tags }}
          labels: ${{ steps.test-backend-meta.outputs.labels }}


  test-images:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    timeout-minutes: 10
    services:
#      test-backend:
#        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/${{ env.TEST_BACKEND_IMAGE_NAME }}:${{ github.sha }}
      postgres-edc-1:
        image: postgres:13.3
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: edc
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres || exit 1" --health-interval=10s --health-timeout=5s --health-retries=3
      postgres-edc-2:
        image: postgres:13.3
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: edc
        ports:
          - 6432:5432
        options: --health-cmd="pg_isready -U postgres || exit 1" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Run Tests with Gradle
        uses: gradle/gradle-build-action@a4cf152f482c7ca97ef56ead29bf08bcd953284c
        with:
          arguments: test -Pe2e-test
        env:
          SKIP_TESTCONTAINERS: true
          TEST_POSTGRES_JDBC_URL: jdbc:postgresql://localhost:5432/edc
          TEST_POSTGRES_JDBC_USER: postgres
          TEST_POSTGRES_JDBC_PASSWORD: postgres
          TEST_POSTGRES_JDBC_URL_1: jdbc:postgresql://localhost:6432/edc
          TEST_POSTGRES_JDBC_USER_1: postgres
          TEST_POSTGRES_JDBC_PASSWORD_1: postgres