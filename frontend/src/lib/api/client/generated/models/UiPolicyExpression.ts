/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UiPolicyExpressionType } from './UiPolicyExpressionType';
import {
    UiPolicyExpressionTypeFromJSON,
    UiPolicyExpressionTypeFromJSONTyped,
    UiPolicyExpressionTypeToJSON,
    UiPolicyExpressionTypeToJSONTyped,
} from './UiPolicyExpressionType';
import type { UiPolicyConstraint } from './UiPolicyConstraint';
import {
    UiPolicyConstraintFromJSON,
    UiPolicyConstraintFromJSONTyped,
    UiPolicyConstraintToJSON,
    UiPolicyConstraintToJSONTyped,
} from './UiPolicyConstraint';

/**
 * ODRL constraint as supported by the sovity product landscape
 * @export
 * @interface UiPolicyExpression
 */
export interface UiPolicyExpression {
    /**
     * Expression type
     * @type {UiPolicyExpressionType}
     * @memberof UiPolicyExpression
     */
    type: UiPolicyExpressionType;
    /**
     * Only for types AND, OR, XONE. List of sub-expressions to be evaluated according to the expressionType.
     * @type {Array<UiPolicyExpression>}
     * @memberof UiPolicyExpression
     */
    expressions?: Array<UiPolicyExpression>;
    /**
     * Only for type CONSTRAINT. A single constraint.
     * @type {UiPolicyConstraint}
     * @memberof UiPolicyExpression
     */
    constraint?: UiPolicyConstraint;
}



/**
 * Check if a given object implements the UiPolicyExpression interface.
 */
export function instanceOfUiPolicyExpression(value: any): value is UiPolicyExpression {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function UiPolicyExpressionFromJSON(json: any): UiPolicyExpression {
    return UiPolicyExpressionFromJSONTyped(json, false);
}

export function UiPolicyExpressionFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiPolicyExpression {
    if (json == null) {
        return json;
    }
    return {
        
        'type': UiPolicyExpressionTypeFromJSON(json['type']),
        'expressions': json['expressions'] == null ? undefined : ((json['expressions'] as Array<any>).map(UiPolicyExpressionFromJSON)),
        'constraint': json['constraint'] == null ? undefined : UiPolicyConstraintFromJSON(json['constraint']),
    };
}

export function UiPolicyExpressionToJSON(json: any): UiPolicyExpression {
    return UiPolicyExpressionToJSONTyped(json, false);
}

export function UiPolicyExpressionToJSONTyped(value?: UiPolicyExpression | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': UiPolicyExpressionTypeToJSON(value['type']),
        'expressions': value['expressions'] == null ? undefined : ((value['expressions'] as Array<any>).map(UiPolicyExpressionToJSON)),
        'constraint': UiPolicyConstraintToJSON(value['constraint']),
    };
}

