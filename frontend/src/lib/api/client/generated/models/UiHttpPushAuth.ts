/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UiHttpAuthApiKey } from './UiHttpAuthApiKey';
import {
    UiHttpAuthApiKeyFromJSON,
    UiHttpAuthApiKeyFromJSONTyped,
    UiHttpAuthApiKeyToJSON,
    UiHttpAuthApiKeyToJSONTyped,
} from './UiHttpAuthApiKey';
import type { UiHttpPushAuthType } from './UiHttpPushAuthType';
import {
    UiHttpPushAuthTypeFromJSON,
    UiHttpPushAuthTypeFromJSONTyped,
    UiHttpPushAuthTypeToJSON,
    UiHttpPushAuthTypeToJSONTyped,
} from './UiHttpPushAuthType';
import type { UiHttpAuthBasic } from './UiHttpAuthBasic';
import {
    UiHttpAuthBasicFromJSON,
    UiHttpAuthBasicFromJSONTyped,
    UiHttpAuthBasicToJSON,
    UiHttpAuthBasicToJSONTyped,
} from './UiHttpAuthBasic';

/**
 * Available authentication methods for when pushing data into a data sink with HTTP PUSH. Use only one.
 * @export
 * @interface UiHttpPushAuth
 */
export interface UiHttpPushAuth {
    /**
     * The type of authentication.
     * @type {UiHttpPushAuthType}
     * @memberof UiHttpPushAuth
     */
    type: UiHttpPushAuthType;
    /**
     * Required when type=BASIC. To use basic authentication.
     * @type {UiHttpAuthBasic}
     * @memberof UiHttpPushAuth
     */
    basic?: UiHttpAuthBasic;
    /**
     * Required when type=API_KEY. To use api key authentication with a secret from the vault.
     * @type {UiHttpAuthApiKey}
     * @memberof UiHttpPushAuth
     */
    apiKey?: UiHttpAuthApiKey;
}



/**
 * Check if a given object implements the UiHttpPushAuth interface.
 */
export function instanceOfUiHttpPushAuth(value: any): value is UiHttpPushAuth {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function UiHttpPushAuthFromJSON(json: any): UiHttpPushAuth {
    return UiHttpPushAuthFromJSONTyped(json, false);
}

export function UiHttpPushAuthFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiHttpPushAuth {
    if (json == null) {
        return json;
    }
    return {
        
        'type': UiHttpPushAuthTypeFromJSON(json['type']),
        'basic': json['basic'] == null ? undefined : UiHttpAuthBasicFromJSON(json['basic']),
        'apiKey': json['apiKey'] == null ? undefined : UiHttpAuthApiKeyFromJSON(json['apiKey']),
    };
}

export function UiHttpPushAuthToJSON(json: any): UiHttpPushAuth {
    return UiHttpPushAuthToJSONTyped(json, false);
}

export function UiHttpPushAuthToJSONTyped(value?: UiHttpPushAuth | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': UiHttpPushAuthTypeToJSON(value['type']),
        'basic': UiHttpAuthBasicToJSON(value['basic']),
        'apiKey': UiHttpAuthApiKeyToJSON(value['apiKey']),
    };
}

