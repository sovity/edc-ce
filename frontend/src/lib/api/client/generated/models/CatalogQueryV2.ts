/*
 * Copyright 2025 sovity GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Contributors:
 *     sovity - init and continued development
 */
/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AssetFilterConstraint } from './AssetFilterConstraint';
import {
    AssetFilterConstraintFromJSON,
    AssetFilterConstraintFromJSONTyped,
    AssetFilterConstraintToJSON,
    AssetFilterConstraintToJSONTyped,
} from './AssetFilterConstraint';
import type { CatalogSortBy } from './CatalogSortBy';
import {
    CatalogSortByFromJSON,
    CatalogSortByFromJSONTyped,
    CatalogSortByToJSON,
    CatalogSortByToJSONTyped,
} from './CatalogSortBy';

/**
 * Catalog query parameters
 * @export
 * @interface CatalogQueryV2
 */
export interface CatalogQueryV2 {
    /**
     * Target EDC DSP endpoint URL
     * @type {string}
     * @memberof CatalogQueryV2
     */
    connectorEndpoint: string;
    /**
     * Target EDC Participant ID
     * @type {string}
     * @memberof CatalogQueryV2
     */
    participantId: string;
    /**
     * Conjunction of filter expressions for data offer filtering
     * @type {Array<AssetFilterConstraint>}
     * @memberof CatalogQueryV2
     */
    filter?: Array<AssetFilterConstraint>;
    /**
     * Limit the number of results
     * @type {number}
     * @memberof CatalogQueryV2
     */
    limit?: number;
    /**
     * Offset for returned results, e.g. start at result 2
     * @type {number}
     * @memberof CatalogQueryV2
     */
    offset?: number;
    /**
     * Field to sort by
     * @type {CatalogSortBy}
     * @memberof CatalogQueryV2
     * @deprecated
     */
    sortBy?: CatalogSortBy;
}

/**
 * Check if a given object implements the CatalogQueryV2 interface.
 */
export function instanceOfCatalogQueryV2(value: any): value is CatalogQueryV2 {
    if (!('connectorEndpoint' in value) || value['connectorEndpoint'] === undefined) return false;
    if (!('participantId' in value) || value['participantId'] === undefined) return false;
    return true;
}

export function CatalogQueryV2FromJSON(json: any): CatalogQueryV2 {
    return CatalogQueryV2FromJSONTyped(json, false);
}

export function CatalogQueryV2FromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogQueryV2 {
    if (json == null) {
        return json;
    }
    return {
        
        'connectorEndpoint': json['connectorEndpoint'],
        'participantId': json['participantId'],
        'filter': json['filter'] == null ? undefined : ((json['filter'] as Array<any>).map(AssetFilterConstraintFromJSON)),
        'limit': json['limit'] == null ? undefined : json['limit'],
        'offset': json['offset'] == null ? undefined : json['offset'],
        'sortBy': json['sortBy'] == null ? undefined : CatalogSortByFromJSON(json['sortBy']),
    };
}

export function CatalogQueryV2ToJSON(json: any): CatalogQueryV2 {
    return CatalogQueryV2ToJSONTyped(json, false);
}

export function CatalogQueryV2ToJSONTyped(value?: CatalogQueryV2 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'connectorEndpoint': value['connectorEndpoint'],
        'participantId': value['participantId'],
        'filter': value['filter'] == null ? undefined : ((value['filter'] as Array<any>).map(AssetFilterConstraintToJSON)),
        'limit': value['limit'],
        'offset': value['offset'],
        'sortBy': CatalogSortByToJSON(value['sortBy']),
    };
}

