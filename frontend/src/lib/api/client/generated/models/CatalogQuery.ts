/* eslint-disable */
/**
 * sovity EDC API Wrapper
 * sovity\'s EDC API Wrapper contains a selection of APIs for multiple consumers, e.g. our EDC UI API, our generic Use Case API, our Commercial Edition APIs, etc. We bundled these APIs, so we can have an easier time generating our API Client Libraries.
 *
 * The version of the OpenAPI document: 0.0.0
 * Contact: contact@sovity.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CatalogFilterExpression } from './CatalogFilterExpression';
import {
    CatalogFilterExpressionFromJSON,
    CatalogFilterExpressionFromJSONTyped,
    CatalogFilterExpressionToJSON,
    CatalogFilterExpressionToJSONTyped,
} from './CatalogFilterExpression';

/**
 * Catalog query parameters
 * @export
 * @interface CatalogQuery
 */
export interface CatalogQuery {
    /**
     * Target EDC DSP endpoint URL. Can contain a queryParam 'participantId', which is provided by default in the Connector Endpoint in the EDC UI.
     * @type {string}
     * @memberof CatalogQuery
     */
    connectorEndpoint: string;
    /**
     * Target EDC Participant ID. It is required if the connector endpoint does not contain the queryParam 'participantId'.
     * @type {string}
     * @memberof CatalogQuery
     */
    participantId?: string;
    /**
     * Limit the number of results
     * @type {number}
     * @memberof CatalogQuery
     */
    limit?: number;
    /**
     * Offset for returned results, e.g. start at result 2
     * @type {number}
     * @memberof CatalogQuery
     */
    offset?: number;
    /**
     * Filter expressions for catalog filtering
     * @type {Array<CatalogFilterExpression>}
     * @memberof CatalogQuery
     */
    filterExpressions?: Array<CatalogFilterExpression>;
}

/**
 * Check if a given object implements the CatalogQuery interface.
 */
export function instanceOfCatalogQuery(value: any): value is CatalogQuery {
    if (!('connectorEndpoint' in value) || value['connectorEndpoint'] === undefined) return false;
    return true;
}

export function CatalogQueryFromJSON(json: any): CatalogQuery {
    return CatalogQueryFromJSONTyped(json, false);
}

export function CatalogQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogQuery {
    if (json == null) {
        return json;
    }
    return {
        
        'connectorEndpoint': json['connectorEndpoint'],
        'participantId': json['participantId'] == null ? undefined : json['participantId'],
        'limit': json['limit'] == null ? undefined : json['limit'],
        'offset': json['offset'] == null ? undefined : json['offset'],
        'filterExpressions': json['filterExpressions'] == null ? undefined : ((json['filterExpressions'] as Array<any>).map(CatalogFilterExpressionFromJSON)),
    };
}

export function CatalogQueryToJSON(json: any): CatalogQuery {
    return CatalogQueryToJSONTyped(json, false);
}

export function CatalogQueryToJSONTyped(value?: CatalogQuery | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'connectorEndpoint': value['connectorEndpoint'],
        'participantId': value['participantId'],
        'limit': value['limit'],
        'offset': value['offset'],
        'filterExpressions': value['filterExpressions'] == null ? undefined : ((value['filterExpressions'] as Array<any>).map(CatalogFilterExpressionToJSON)),
    };
}

